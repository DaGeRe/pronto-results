{
  "url" : "https://github.com/apache/commons-numbers.git",
  "initialversion" : {
    "version" : "b0db8fca01f3c6949817052acb48cbb163955958",
    "jdk" : 8,
    "initialDependencies" : {
      "org.apache.commons.complex.ComplexTest#testAbs" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAbs"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAbsInfinite" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAbsInfinite"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAbsNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAbsNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAcos" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "acos"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "add"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "negate"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt1z"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAcos"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAcosInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "acos"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "add"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "negate"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt1z"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAcosInf"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAcosNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "acos"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAcosNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAdd" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "add"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAdd"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAddInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "add"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAddInf"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAddNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "add"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAddNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAsin" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "add"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "asin"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "negate"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt1z"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAsin"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAsinInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "add"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "asin"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "negate"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt1z"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAsinInf"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAsinNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "asin"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAsinNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAtan" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "add"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "atan"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "divide"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAtan"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAtanI" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "add"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "atan"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "divide"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAtanI"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAtanInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "add"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "atan"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "divide"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAtanInf"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testAtanNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "atan"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testAtanNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testConjugate" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "conjugate"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testConjugate"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testConjugateInfiinite" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "conjugate"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testConjugateInfiinite"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testConjugateNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "conjugate"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testConjugateNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testConstructor" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testConstructor"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testConstructorNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testConstructorNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testCos" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "cos"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testCos"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testCosInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "cos"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testCosInf"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testCosNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "cos"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testCosNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testCosh" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "cosh"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testCosh"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testCoshInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "cosh"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testCoshInf"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testCoshNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "cosh"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testCoshNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testDivide" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "divide"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testDivide"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testDivideImaginary" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "divide"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testDivideImaginary"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testDivideInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "divide"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testDivideInf"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testDivideNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "divide"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testDivideNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testDivideNaNInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "divide"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testDivideNaNInf"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testDivideReal" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "divide"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testDivideReal"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testDivideZero" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "divide"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testDivideZero"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testDivideZeroZero" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "divide"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testDivideZeroZero"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testEqualsClass" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testEqualsClass"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testEqualsImaginaryDifference" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testEqualsImaginaryDifference"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testEqualsNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testEqualsNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testEqualsNull" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testEqualsNull"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testEqualsRealDifference" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testEqualsRealDifference"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testEqualsSame" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testEqualsSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testEqualsTrue" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testEqualsTrue"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testExp" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "negate"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testExp"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testExpInf1" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testExpInf1"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testExpInf2" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testExpInf2"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testExpInf3" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testExpInf3"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testExpInf4" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testExpInf4"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testExpInf5" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testExpInf5"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testExpInf6" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testExpInf6"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testExpInf7" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testExpInf7"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testExpInf8" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testExpInf8"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testExpNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testExpNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testFloatingPointEqualsPrecondition1" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testFloatingPointEqualsPrecondition1"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testFloatingPointEqualsPrecondition2" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testFloatingPointEqualsPrecondition2"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testGetArgument" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getArgument"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testGetArgument"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testGetArgumentInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getArgument"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testGetArgumentInf"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testGetArgumentNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getArgument"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testGetArgumentNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testHashCode" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "hash"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "hashCode"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testHashCode"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testLog" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testLog"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testLogInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testLogInf"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testLogNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testLogNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testLogZero" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testLogZero"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testMultiply" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testMultiply"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testMultiplyInfInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testMultiplyInfInf"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testMultiplyNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testMultiplyNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testMultiplyNaNInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testMultiplyNaNInf"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testNegate" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "negate"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testNegate"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testNegateNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "negate"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testNegateNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "nthRoot"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testNthRoot_cornercase_NAN_Inf"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getArgument"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "nthRoot"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getArgument"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "nthRoot"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testNthRoot_cornercase_thirdRoot_realPartZero"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testNthRoot_normal_fourthRoot" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getArgument"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "nthRoot"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testNthRoot_normal_fourthRoot"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testNthRoot_normal_thirdRoot" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getArgument"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "nthRoot"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testNthRoot_normal_thirdRoot"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testPow" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "pow"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testPow"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testPowInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "pow"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testPowInf"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testPowNaNBase" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "pow"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testPowNaNBase"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testPowNaNExponent" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "pow"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testPowNaNExponent"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testPowZero" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "pow"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testPowZero"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testReciprocal" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "reciprocal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testReciprocal"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testReciprocalImaginary" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "reciprocal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testReciprocalImaginary"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testReciprocalInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "reciprocal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testReciprocalInf"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testReciprocalNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "reciprocal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testReciprocalNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testReciprocalZero" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "reciprocal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testReciprocalZero"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarAdd" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "add"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarAdd"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarAddInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "add"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarAddInf"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarAddNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "add"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarAddNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarDivide" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "divide"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarDivide"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarDivideNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "divide"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarDivideNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarDivideZero" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "divide"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarDivideZero"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarMultiply" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarMultiply"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarMultiplyInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarMultiplyInf"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarMultiplyNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarMultiplyNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarPow" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "pow"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarPow"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarPowInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "pow"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarPowInf"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarPowNaNBase" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "pow"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarPowNaNBase"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarPowNaNExponent" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "pow"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarPowNaNExponent"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarPowZero" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "log"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "pow"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarPowZero"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarSubtract" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarSubtract"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarSubtractInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarSubtractInf"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testScalarSubtractNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testScalarSubtractNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSerial" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "readResolve"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSerial"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest$TestComplex",
          "filename" : "org.apache.commons.complex.ComplexTest$TestComplex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest$TestComplex",
          "filename" : "org.apache.commons.complex.ComplexTest$TestComplex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "serializeAndRecover"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSin" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sin"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSin"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSinInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sin"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSinInf"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSinNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sin"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSinNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSinh" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sinh"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSinh"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSinhInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sinh"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSinhInf"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSinhNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sinh"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSinhNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSqrt1z" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt1z"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSqrt1z"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSqrt1zNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt1z"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSqrt1zNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSqrtImaginaryNegative" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSqrtImaginaryNegative"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSqrtImaginaryZero" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSqrtImaginaryZero"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSqrtInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSqrtInf"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSqrtNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSqrtNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSqrtPolar" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSqrtPolar"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexUtils",
          "filename" : "org.apache.commons.complex.ComplexUtils",
          "method" : "polar2Complex"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSqrtRealNegative" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSqrtRealNegative"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSqrtRealPositive" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSqrtRealPositive"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSqrtRealZero" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "abs"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isInfinite"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "sqrt"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSqrtRealZero"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSubtract" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSubtract"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSubtractInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSubtractInf"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testSubtractNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testSubtractNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testTan" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "tan"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testTan"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testTanCritical" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "tan"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testTanCritical"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testTanInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "tan"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "valueOf"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testTanInf"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testTanNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "tan"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testTanNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testTanh" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "tanh"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testTanh"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testTanhCritical" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "tanh"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testTanhCritical"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testTanhInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "tanh"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "valueOf"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testTanhInf"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexTest#testTanhNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "isNaN"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "tanh"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexTest",
          "filename" : "org.apache.commons.complex.ComplexTest",
          "method" : "testTanhNaN"
        } ]
      },
      "org.apache.commons.complex.ComplexUtilsTest#testCExtract" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexUtils",
          "filename" : "org.apache.commons.complex.ComplexUtils",
          "method" : "real2Complex"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexUtilsTest",
          "filename" : "org.apache.commons.complex.ComplexUtilsTest",
          "method" : "testCExtract"
        } ]
      },
      "org.apache.commons.complex.ComplexUtilsTest#testInitialize" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexUtils",
          "filename" : "org.apache.commons.complex.ComplexUtils",
          "method" : "initialize"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexUtilsTest",
          "filename" : "org.apache.commons.complex.ComplexUtilsTest",
          "method" : "testInitialize"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexUtilsTest#testPolar2Complex" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "checkNotNull"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "createComplex"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "exp"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "negate"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexUtils",
          "filename" : "org.apache.commons.complex.ComplexUtils",
          "method" : "polar2Complex"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexUtilsTest",
          "filename" : "org.apache.commons.complex.ComplexUtilsTest",
          "method" : "altPolar"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexUtilsTest",
          "filename" : "org.apache.commons.complex.ComplexUtilsTest",
          "method" : "testPolar2Complex"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertEquals"
        } ]
      },
      "org.apache.commons.complex.ComplexUtilsTest#testPolar2ComplexInf" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexUtils",
          "filename" : "org.apache.commons.complex.ComplexUtils",
          "method" : "polar2Complex"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexUtilsTest",
          "filename" : "org.apache.commons.complex.ComplexUtilsTest",
          "method" : "testPolar2ComplexInf"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.ComplexUtilsTest#testPolar2ComplexNaN" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.Complex",
          "filename" : "org.apache.commons.complex.Complex",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexUtils",
          "filename" : "org.apache.commons.complex.ComplexUtils",
          "method" : "polar2Complex"
        }, {
          "clazz" : "org.apache.commons.complex.ComplexUtilsTest",
          "filename" : "org.apache.commons.complex.ComplexUtilsTest",
          "method" : "testPolar2ComplexNaN"
        }, {
          "clazz" : "org.apache.commons.complex.TestUtils",
          "filename" : "org.apache.commons.complex.TestUtils",
          "method" : "assertSame"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testAccessors1" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ0"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ1"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ2"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ3"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testAccessors1"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testAccessors2" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ0"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ1"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ2"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ3"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getScalarPart"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getVectorPart"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testAccessors2"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testAccessors3" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ0"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ1"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ2"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ3"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getScalarPart"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getVectorPart"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testAccessors3"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testAddQuaternionQuaternion" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "add"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ0"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ1"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ2"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ3"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testAddQuaternionQuaternion"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testConjugate" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getConjugate"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ0"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ1"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ2"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ3"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testConjugate"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testDotProductQuaternionQuaternion" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "dotProduct"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ0"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ1"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ2"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ3"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testDotProductQuaternionQuaternion"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testGetInverse" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getInverse"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ0"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ1"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ2"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ3"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testGetInverse"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testIsPureQuaternion" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ0"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "isPureQuaternion"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testIsPureQuaternion"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testNorm" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getConjugate"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getNorm"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ0"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ1"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ2"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ3"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getScalarPart"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testNorm"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testNormalize" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getNorm"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ0"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ1"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ2"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ3"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "normalize"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testNormalize"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testNormalizeFail" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getNorm"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "normalize"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testNormalizeFail"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testObjectEquals" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "equals"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ0"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ1"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ2"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ3"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testObjectEquals"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testScalarMultiplyDouble" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ0"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ1"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ2"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ3"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "multiply"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testScalarMultiplyDouble"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testSubtractQuaternionQuaternion" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ0"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ1"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ2"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "getQ3"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "subtract"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testSubtractQuaternionQuaternion"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testToString" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "toString"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testToString"
        } ]
      },
      "org.apache.commons.complex.QuaternionTest#testWrongDimension" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.Quaternion",
          "filename" : "org.apache.commons.complex.Quaternion",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.QuaternionTest",
          "filename" : "org.apache.commons.complex.QuaternionTest",
          "method" : "testWrongDimension"
        } ]
      },
      "org.apache.commons.complex.RetryRunnerTest#testRetryFailAlways" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.RetryRunnerTest",
          "filename" : "org.apache.commons.complex.RetryRunnerTest",
          "method" : "testRetryFailAlways"
        } ]
      },
      "org.apache.commons.complex.RetryRunnerTest#testRetryFailSometimes" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.RetryRunnerTest",
          "filename" : "org.apache.commons.complex.RetryRunnerTest",
          "method" : "testRetryFailSometimes"
        } ]
      },
      "org.apache.commons.complex.RootsOfUnityTest#testComputeRoots" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.RootsOfUnity",
          "filename" : "org.apache.commons.complex.RootsOfUnity",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.RootsOfUnity",
          "filename" : "org.apache.commons.complex.RootsOfUnity",
          "method" : "computeRoots"
        }, {
          "clazz" : "org.apache.commons.complex.RootsOfUnity",
          "filename" : "org.apache.commons.complex.RootsOfUnity",
          "method" : "getImaginary"
        }, {
          "clazz" : "org.apache.commons.complex.RootsOfUnity",
          "filename" : "org.apache.commons.complex.RootsOfUnity",
          "method" : "getNumberOfRoots"
        }, {
          "clazz" : "org.apache.commons.complex.RootsOfUnity",
          "filename" : "org.apache.commons.complex.RootsOfUnity",
          "method" : "getReal"
        }, {
          "clazz" : "org.apache.commons.complex.RootsOfUnity",
          "filename" : "org.apache.commons.complex.RootsOfUnity",
          "method" : "isCounterClockWise"
        }, {
          "clazz" : "org.apache.commons.complex.RootsOfUnityTest",
          "filename" : "org.apache.commons.complex.RootsOfUnityTest",
          "method" : "doTestComputeRoots"
        }, {
          "clazz" : "org.apache.commons.complex.RootsOfUnityTest",
          "filename" : "org.apache.commons.complex.RootsOfUnityTest",
          "method" : "testComputeRoots"
        } ]
      },
      "org.apache.commons.complex.RootsOfUnityTest#testGetNumberOfRoots" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.RootsOfUnity",
          "filename" : "org.apache.commons.complex.RootsOfUnity",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.RootsOfUnity",
          "filename" : "org.apache.commons.complex.RootsOfUnity",
          "method" : "computeRoots"
        }, {
          "clazz" : "org.apache.commons.complex.RootsOfUnity",
          "filename" : "org.apache.commons.complex.RootsOfUnity",
          "method" : "getNumberOfRoots"
        }, {
          "clazz" : "org.apache.commons.complex.RootsOfUnityTest",
          "filename" : "org.apache.commons.complex.RootsOfUnityTest",
          "method" : "testGetNumberOfRoots"
        } ]
      },
      "org.apache.commons.complex.RootsOfUnityTest#testZeroNumberOfRoots" : {
        "entities" : [ {
          "clazz" : "org.apache.commons.complex.RootsOfUnity",
          "filename" : "org.apache.commons.complex.RootsOfUnity",
          "method" : "<init>"
        }, {
          "clazz" : "org.apache.commons.complex.RootsOfUnity",
          "filename" : "org.apache.commons.complex.RootsOfUnity",
          "method" : "computeRoots"
        }, {
          "clazz" : "org.apache.commons.complex.RootsOfUnityTest",
          "filename" : "org.apache.commons.complex.RootsOfUnityTest",
          "method" : "testZeroNumberOfRoots"
        } ]
      }
    }
  },
  "versions" : {
    "dbad5ed4b7d577f9cf8cc757807b4b886c9dcbbf" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "dbad5ed4b7d577f9cf8cc757807b4b886c9dcbbf~1",
      "changedClazzes" : {
        "org.apache.commons.complex.RootsOfUnity#<init>" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testMathIllegalArgument1", "testMathIllegalArgument2", "testMathIllegalArgument3" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnity#getImaginary" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testMathIllegalArgument2" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnity#getReal" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testMathIllegalArgument1" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnity#isCounterClockWise" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testMathIllegalArgument3" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnityTest" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots", "testMathIllegalArgument1", "testMathIllegalArgument2", "testMathIllegalArgument3", "testZeroNumberOfRoots" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnityTest#testMathIllegalArgument1" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testMathIllegalArgument1" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnityTest#testMathIllegalArgument2" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testMathIllegalArgument2" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnityTest#testMathIllegalArgument3" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testMathIllegalArgument3" ]
          }
        }
      }
    },
    "f7cca80f4a6913f22829ad5dfcebd980ce5289cd" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "f7cca80f4a6913f22829ad5dfcebd980ce5289cd~1",
      "changedClazzes" : {
        "org.apache.commons.complex.Complex#<init>" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testMath221", "testReciprocalReal" ]
          }
        },
        "org.apache.commons.complex.Complex#checkNotNull" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testMath221" ]
          }
        },
        "org.apache.commons.complex.Complex#createComplex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testMath221", "testReciprocalReal" ]
          }
        },
        "org.apache.commons.complex.Complex#equals" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testMath221", "testReciprocalReal" ]
          }
        },
        "org.apache.commons.complex.Complex#equals(Complex,Complex,double)" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testDivideImaginary", "testDivideInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testHashCode", "testMultiplyNaNInf", "testNthRoot_cornercase_NAN_Inf", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial" ]
          }
        },
        "org.apache.commons.complex.Complex#equals(Complex,Complex,int)" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testDivideImaginary", "testDivideInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testHashCode", "testMultiplyNaNInf", "testNthRoot_cornercase_NAN_Inf", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial" ]
          }
        },
        "org.apache.commons.complex.Complex#equalsWithRelativeTolerance" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN" ]
          }
        },
        "org.apache.commons.complex.Complex#equalsWithRelativeTolerance(Complex,Complex,double)" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.Complex#multiply" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testMath221" ]
          }
        },
        "org.apache.commons.complex.Complex#reciprocal" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testReciprocalReal" ]
          }
        },
        "org.apache.commons.complex.ComplexTest" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testMath221", "testReciprocalReal" ]
          }
        },
        "org.apache.commons.complex.ComplexTest#testFloatingPointEquals" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testFloatingPointEquals" ]
          }
        },
        "org.apache.commons.complex.ComplexTest#testFloatingPointEqualsNaN" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testFloatingPointEqualsNaN" ]
          }
        },
        "org.apache.commons.complex.ComplexTest#testFloatingPointEqualsWithAllowedDelta" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testFloatingPointEqualsWithAllowedDelta" ]
          }
        },
        "org.apache.commons.complex.ComplexTest#testFloatingPointEqualsWithAllowedDeltaNaN" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testFloatingPointEqualsWithAllowedDeltaNaN" ]
          }
        },
        "org.apache.commons.complex.ComplexTest#testFloatingPointEqualsWithRelativeTolerance" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testFloatingPointEqualsWithRelativeTolerance" ]
          }
        },
        "org.apache.commons.complex.ComplexTest#testFloatingPointEqualsWithRelativeToleranceNaN" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testFloatingPointEqualsWithRelativeToleranceNaN" ]
          }
        },
        "org.apache.commons.complex.ComplexTest#testMath221" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testMath221" ]
          }
        },
        "org.apache.commons.complex.ComplexTest#testReciprocalReal" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testReciprocalReal" ]
          }
        },
        "org.apache.commons.complex.Precision" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.Precision#equals" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testMath221", "testReciprocalReal" ],
            "org.apache.commons.complex.QuaternionTest" : [ "testIsUnitQuaternion", "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "org.apache.commons.complex.Precision#equalsWithRelativeTolerance" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN" ]
          }
        },
        "org.apache.commons.complex.Quaternion" : {
          "testcases" : {
            "org.apache.commons.complex.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testGetInverse", "testIsPureQuaternion", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testWrongDimension" ]
          }
        },
        "org.apache.commons.complex.Quaternion#<init>" : {
          "testcases" : {
            "org.apache.commons.complex.QuaternionTest" : [ "testIsUnitQuaternion", "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "org.apache.commons.complex.Quaternion#equals" : {
          "testcases" : {
            "org.apache.commons.complex.QuaternionTest" : [ "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "org.apache.commons.complex.Quaternion#getNorm" : {
          "testcases" : {
            "org.apache.commons.complex.QuaternionTest" : [ "testIsUnitQuaternion" ]
          }
        },
        "org.apache.commons.complex.Quaternion#getQ0" : {
          "testcases" : {
            "org.apache.commons.complex.QuaternionTest" : [ "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "org.apache.commons.complex.Quaternion#getQ1" : {
          "testcases" : {
            "org.apache.commons.complex.QuaternionTest" : [ "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "org.apache.commons.complex.Quaternion#getQ2" : {
          "testcases" : {
            "org.apache.commons.complex.QuaternionTest" : [ "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "org.apache.commons.complex.Quaternion#getQ3" : {
          "testcases" : {
            "org.apache.commons.complex.QuaternionTest" : [ "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "org.apache.commons.complex.Quaternion#isUnitQuaternion" : {
          "testcases" : {
            "org.apache.commons.complex.QuaternionTest" : [ "testIsUnitQuaternion" ]
          }
        },
        "org.apache.commons.complex.Quaternion#normalize" : {
          "testcases" : {
            "org.apache.commons.complex.QuaternionTest" : [ "testIsUnitQuaternion" ]
          }
        },
        "org.apache.commons.complex.QuaternionTest" : {
          "testcases" : {
            "org.apache.commons.complex.QuaternionTest" : [ "testIsUnitQuaternion", "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "org.apache.commons.complex.QuaternionTest#testIsUnitQuaternion" : {
          "testcases" : {
            "org.apache.commons.complex.QuaternionTest" : [ "testIsUnitQuaternion" ]
          }
        },
        "org.apache.commons.complex.QuaternionTest#testQuaternionEquals" : {
          "testcases" : {
            "org.apache.commons.complex.QuaternionTest" : [ "testQuaternionEquals" ]
          }
        },
        "org.apache.commons.complex.QuaternionTest#testQuaternionEquals2" : {
          "testcases" : {
            "org.apache.commons.complex.QuaternionTest" : [ "testQuaternionEquals2" ]
          }
        }
      }
    },
    "c11baf2d397134c700b17a1603b041d49e2af01e" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "c11baf2d397134c700b17a1603b041d49e2af01e~1",
      "changedClazzes" : {
        "org.apache.commons.complex.Complex#<init>" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.Complex#getImaginary" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.Complex#getReal" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#complex2Imaginary" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#complex2ImaginaryFloat" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#complex2Interleaved" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#complex2InterleavedFloat" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#complex2Real" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToReal" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#complex2RealFloat" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToReal" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#extractComplexFromInterleavedArray" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#extractComplexFromRealArray" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#extractInterleavedFromComplexArray" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#extractRealFloatFromComplexArray" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#extractRealFromComplexArray" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#illegalArgument" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#imaginary2Complex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testImaginaryToComplex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#interleaved2Complex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#outOfRange" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.ComplexUtils#polar2Complex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#real2Complex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testRealToComplex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#split2Complex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testPolar2ComplexIllegalModulus", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#setArrays" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testComplexToImaginary" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testComplexToInterleaved" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testComplexToReal" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToReal" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testExtractionMethods" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testImaginaryToComplex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testImaginaryToComplex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testInterleavedToComplex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testRealToComplex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testRealToComplex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testSplit2Complex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.Precision#equals" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.TestUtils" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testAcos", "testAcosInf", "testAsin", "testAsinInf", "testAtan", "testAtanInf", "testCos", "testCosInf", "testCosh", "testCoshInf", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testLog", "testLogInf", "testLogZero", "testPow", "testPowInf", "testPowZero", "testScalarDivideZero", "testScalarPowInf", "testScalarPowZero", "testSerial", "testSin", "testSinInf", "testSinh", "testSinhInf", "testSqrt1z", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testTan", "testTanCritical", "testTanInf", "testTanh", "testTanhCritical", "testTanhInf" ],
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testInitialize", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN" ]
          }
        },
        "org.apache.commons.complex.TestUtils#assertEquals" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.TestUtils#assertSame" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "org.apache.commons.complex.TestUtils#equalsIncludingNaN" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        }
      }
    },
    "e5e3e49afb6d9bbd24c78bc3fd067667d6e536f3" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "e5e3e49afb6d9bbd24c78bc3fd067667d6e536f3~1",
      "changedClazzes" : {
        "org.apache.commons.complex.Complex#<init>" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.Complex#getImaginary" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.Complex#getReal" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testSqrtPolar" ],
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testCExtract", "testInitialize", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#complex2Imaginary" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#complex2ImaginaryFloat" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#complex2Interleaved" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#complex2InterleavedFloat" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#complex2Real" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToReal" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#complex2RealFloat" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToReal" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#extractComplexFromInterleavedArray" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#extractComplexFromRealArray" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#extractInterleavedFromComplexArray" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#extractRealFloatFromComplexArray" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#extractRealFromComplexArray" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#imaginary2Complex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testImaginaryToComplex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#interleaved2Complex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#polar2Complex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#real2Complex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testRealToComplex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils#split2Complex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtils$IndexOutOfRangeException" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.ComplexUtils$NegativeModulusException" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.ComplexUtils$NegativeModulusException#<init>" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testPolar2ComplexIllegalModulus", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#setArrays" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testComplexToImaginary" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testComplexToInterleaved" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testComplexToReal" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToReal" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testExtractionMethods" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testImaginaryToComplex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testImaginaryToComplex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testInterleavedToComplex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testRealToComplex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testRealToComplex" ]
          }
        },
        "org.apache.commons.complex.ComplexUtilsTest#testSplit2Complex" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.Precision#equals" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.TestUtils#assertEquals" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "org.apache.commons.complex.TestUtils#assertSame" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "org.apache.commons.complex.TestUtils#equalsIncludingNaN" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        }
      }
    },
    "b206d9c80c95433d530e639308e38b92c7e3fdef" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "b206d9c80c95433d530e639308e38b92c7e3fdef~1",
      "changedClazzes" : {
        "org.apache.commons.complex.Complex#<init>" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnity" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testComputeRoots" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnity#<init>" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2", "testPrecondition" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnity#getNumberOfRoots" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testGetNumberOfRoots1", "testGetNumberOfRoots2" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnity#getRoot" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnity#isCounterClockwise" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testGetNumberOfRoots1", "testGetNumberOfRoots2" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnityTest" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2", "testPrecondition" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnityTest#testGetNumberOfRoots1" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testGetNumberOfRoots1" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnityTest#testGetNumberOfRoots2" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testGetNumberOfRoots2" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnityTest#testGetRootPrecondition1" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testGetRootPrecondition1" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnityTest#testGetRootPrecondition2" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testGetRootPrecondition2" ]
          }
        },
        "org.apache.commons.complex.RootsOfUnityTest#testPrecondition" : {
          "testcases" : {
            "org.apache.commons.complex.RootsOfUnityTest" : [ "testPrecondition" ]
          }
        }
      }
    },
    "2b29ed84c9461fba037b8ebfd8a39637c08b6b3e" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "2b29ed84c9461fba037b8ebfd8a39637c08b6b3e~1",
      "changedClazzes" : {
        "org.apache.commons.complex.Complex#pow(Complex)" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero" ]
          }
        },
        "org.apache.commons.complex.Complex#pow(double)" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero" ]
          }
        },
        "org.apache.commons.complex.ComplexTest#testPowZero" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testPowZero" ]
          }
        },
        "org.apache.commons.complex.ComplexTest#testScalarPowZero" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testScalarPowZero" ]
          }
        }
      }
    },
    "60308d79340ebc90d579384fed8bea0bdc6ba319" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "60308d79340ebc90d579384fed8bea0bdc6ba319~1",
      "changedClazzes" : {
        "org.apache.commons.complex.ComplexTest#testExp" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testExp" ]
          }
        },
        "org.apache.commons.complex.ComplexTest#testLogInf" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testLogInf" ]
          }
        },
        "org.apache.commons.complex.ComplexTest#testPowZero" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testPowZero" ]
          }
        },
        "org.apache.commons.complex.ComplexTest#testScalarPowZero" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testScalarPowZero" ]
          }
        },
        "org.apache.commons.complex.ComplexTest#testSqrtPolar" : {
          "testcases" : {
            "org.apache.commons.complex.ComplexTest" : [ "testSqrtPolar" ]
          }
        }
      }
    },
    "a752ab8d4e4d1a9982cd1df45743cafc6dedd5dc" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "a752ab8d4e4d1a9982cd1df45743cafc6dedd5dc~1",
      "changedClazzes" : {
        "org.apache.commons.complex.Complex" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.ComplexFormat" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.ComplexFormatAbstractTest" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.ComplexFormatTest" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.ComplexTest" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.ComplexUtils" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.ComplexUtilsTest" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.FrenchComplexFormatTest" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.Precision" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.Quaternion" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.QuaternionTest" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.Retry" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.RetryRunner" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.RetryRunnerTest" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.RootsOfUnity" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.RootsOfUnityTest" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.TestUtils" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.package-info" : {
          "testcases" : { }
        }
      }
    },
    "c45413279a7e1eec230516ec1f8efd5456c6215e" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "c45413279a7e1eec230516ec1f8efd5456c6215e~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAtan", "testAtanI", "testAtanInf", "testConjugate", "testConjugateInfiinite", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosh", "testCoshInf", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testHashCode", "testLog", "testLogInf", "testLogZero", "testMath221", "testMultiply", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalReal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinh", "testSinhInf", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanh", "testTanhCritical", "testTanhInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAsin", "testAsinInf", "testAtan", "testLog", "testLogInf", "testLogZero", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNExponent", "testPowZero", "testScalarPow", "testScalarPowInf", "testScalarPowNaNExponent", "testScalarPowZero", "testSqrt1z", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#acos" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcos", "testAcosInf", "testAcosNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#add" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcos", "testAcosInf", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAtan", "testAtanI", "testAtanInf", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#asin" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAsin", "testAsinInf", "testAsinNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#atan" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAtan", "testAtanI", "testAtanInf", "testAtanNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#checkNotNull" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcos", "testAcosInf", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAtan", "testAtanI", "testAtanInf", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testExp", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSubtract", "testSubtractInf", "testSubtractNaN" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugate", "testConjugateInfiinite", "testConjugateNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#cos" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testCos", "testCosInf", "testCosNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#cosh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testCosh", "testCoshInf", "testCoshNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcos", "testAcosInf", "testAdd", "testAddInf", "testAsin", "testAsinInf", "testAtan", "testAtanI", "testAtanInf", "testConjugate", "testConjugateInfiinite", "testCos", "testCosInf", "testCosh", "testCoshInf", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaNInf", "testDivideReal", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testLog", "testLogInf", "testLogZero", "testMath221", "testMultiply", "testNegate", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNExponent", "testPowZero", "testReciprocal", "testReciprocalImaginary", "testReciprocalReal", "testScalarAdd", "testScalarAddInf", "testScalarDivide", "testScalarMultiply", "testScalarPow", "testScalarPowInf", "testScalarPowNaNExponent", "testScalarPowZero", "testScalarSubtract", "testScalarSubtractInf", "testSerial", "testSin", "testSinInf", "testSinh", "testSinhInf", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testTan", "testTanCritical", "testTanInf", "testTanh", "testTanhCritical", "testTanhInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#divide" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAtan", "testAtanI", "testAtanInf", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#equals" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideImaginary", "testDivideInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testHashCode", "testMath221", "testMultiplyNaNInf", "testNthRoot_cornercase_NAN_Inf", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalReal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#equalsWithRelativeTolerance" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#exp" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getArgument" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcos", "testAcosInf", "testAdd", "testAddInf", "testAsin", "testAsinInf", "testAtan", "testAtanI", "testAtanInf", "testConjugate", "testConjugateInfiinite", "testConstructor", "testCos", "testCosInf", "testCosh", "testCoshInf", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testLog", "testLogInf", "testLogZero", "testMultiply", "testMultiplyNaNInf", "testNegate", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowZero", "testReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarDivide", "testScalarDivideZero", "testScalarPowInf", "testScalarPowZero", "testScalarSubtract", "testScalarSubtractInf", "testSerial", "testSin", "testSinInf", "testSinh", "testSinhInf", "testSqrt1z", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testTan", "testTanCritical", "testTanInf", "testTanh", "testTanhCritical", "testTanhInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcos", "testAcosInf", "testAdd", "testAddInf", "testAsin", "testAsinInf", "testAtan", "testAtanI", "testAtanInf", "testConjugate", "testConstructor", "testCos", "testCosInf", "testCosh", "testCoshInf", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testLog", "testLogInf", "testLogZero", "testMultiply", "testMultiplyNaNInf", "testNegate", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowZero", "testReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarDivide", "testScalarDivideZero", "testScalarPowInf", "testScalarPowZero", "testScalarSubtract", "testScalarSubtractInf", "testSerial", "testSin", "testSinInf", "testSinh", "testSinhInf", "testSqrt1z", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testTan", "testTanCritical", "testTanInf", "testTanh", "testTanhCritical", "testTanhInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#hash" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testHashCode" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#hashCode" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testHashCode" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#isInfinite" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAcos", "testAcosInf", "testAsin", "testAsinInf", "testAtan", "testAtanI", "testAtanInf", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaNInf", "testDivideReal", "testLog", "testLogInf", "testLogZero", "testMultiplyInfInf", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNExponent", "testPowZero", "testScalarDivide", "testScalarPow", "testScalarPowInf", "testScalarPowNaNExponent", "testScalarPowZero", "testSerial", "testSqrt1z", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#isNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcosNaN", "testAsinNaN", "testAtanI", "testAtanNaN", "testConjugateNaN", "testConstructorNaN", "testCosNaN", "testCoshNaN", "testDivideNaN", "testExpNaN", "testLogNaN", "testNegateNaN", "testPowNaNBase", "testPowNaNExponent", "testReciprocalNaN", "testSerial", "testSinNaN", "testSinhNaN", "testSqrt1zNaN", "testSqrtNaN", "testTanNaN", "testTanhNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#log" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcos", "testAcosInf", "testAsin", "testAsinInf", "testAtan", "testAtanI", "testAtanInf", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#multiply" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcos", "testAcosInf", "testAsin", "testAsinInf", "testAtan", "testAtanI", "testAtanInf", "testExp", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero", "testSqrt1z", "testSqrt1zNaN" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#negate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcos", "testAcosInf", "testAsin", "testAsinInf", "testExp", "testNegate", "testNegateNaN" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#nthRoot" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#pow" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#readResolve" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSerial" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#reciprocal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sin" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSin", "testSinInf", "testSinNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSinh", "testSinhInf", "testSinhNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcos", "testAcosInf", "testAsin", "testAsinInf", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt1z" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcos", "testAcosInf", "testAsin", "testAsinInf", "testSqrt1z", "testSqrt1zNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#subtract" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcos", "testAcosInf", "testAsin", "testAsinInf", "testAtan", "testAtanI", "testAtanInf", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSubtract", "testSubtractInf", "testSubtractNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#tan" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testTan", "testTanCritical", "testTanInf", "testTanNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#tanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#valueOf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testTanInf", "testTanhInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAcosNaN", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAsinNaN", "testAtan", "testAtanI", "testAtanInf", "testAtanNaN", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosNaN", "testCosh", "testCoshInf", "testCoshNaN", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinNaN", "testSinh", "testSinhInf", "testSinhNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanNaN", "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAbs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAbsInfinite" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbsInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAbsNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbsNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAcos" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAcosInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcosInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAcosNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcosNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAdd" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAdd" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAddInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAddInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAddNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAddNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAsin" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAsin" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAsinInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAsinInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAsinNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAsinNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAtan" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAtan" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAtanI" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAtanI" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAtanInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAtanInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAtanNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAtanNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testConjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugate" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testConjugateInfiinite" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfiinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testConjugateNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testConstructor" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConstructor" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testConstructorNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConstructorNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testCos" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testCos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testCosInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testCosInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testCosNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testCosNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testCosh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testCosh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testCoshInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testCoshInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testCoshNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testCoshNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testDivide" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivide" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testDivideImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideImaginary" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testDivideInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testDivideNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testDivideNaNInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideNaNInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testDivideReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideReal" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testDivideZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testDivideZeroZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideZeroZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testEqualsClass" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testEqualsClass" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testEqualsImaginaryDifference" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testEqualsImaginaryDifference" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testEqualsNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testEqualsNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testEqualsNull" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testEqualsNull" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testEqualsRealDifference" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testEqualsRealDifference" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testEqualsSame" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testEqualsSame" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testEqualsTrue" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testEqualsTrue" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testExp" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testExp" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testExpInf1" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testExpInf1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testExpInf2" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testExpInf2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testExpInf3" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testExpInf3" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testExpInf4" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testExpInf4" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testExpInf5" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testExpInf5" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testExpInf6" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testExpInf6" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testExpInf7" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testExpInf7" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testExpInf8" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testExpInf8" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testExpNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testExpNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testFloatingPointEquals" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEquals" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testFloatingPointEqualsNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEqualsNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testFloatingPointEqualsPrecondition1" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEqualsPrecondition1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testFloatingPointEqualsPrecondition2" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEqualsPrecondition2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testFloatingPointEqualsWithAllowedDelta" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEqualsWithAllowedDelta" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testFloatingPointEqualsWithAllowedDeltaNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEqualsWithAllowedDeltaNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testFloatingPointEqualsWithRelativeTolerance" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEqualsWithRelativeTolerance" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testFloatingPointEqualsWithRelativeToleranceNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEqualsWithRelativeToleranceNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testGetArgument" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testGetArgument" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testGetArgumentInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testGetArgumentInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testGetArgumentNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testGetArgumentNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testHashCode" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testHashCode" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testLog" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testLog" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testLogInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testLogInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testLogNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testLogNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testLogZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testLogZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testMath221" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testMath221" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testMultiply" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testMultiply" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testMultiplyInfInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testMultiplyInfInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testMultiplyNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testMultiplyNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testMultiplyNaNInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testMultiplyNaNInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testNegate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testNegateNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNegateNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRoot_cornercase_NAN_Inf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRoot_cornercase_thirdRoot_realPartZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testNthRoot_normal_fourthRoot" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRoot_normal_fourthRoot" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testNthRoot_normal_thirdRoot" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRoot_normal_thirdRoot" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testPow" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPow" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testPowInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testPowNaNBase" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowNaNBase" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testPowNaNExponent" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowNaNExponent" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testPowZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testReciprocal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testReciprocal" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testReciprocalImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testReciprocalImaginary" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testReciprocalInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testReciprocalInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testReciprocalNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testReciprocalNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testReciprocalReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testReciprocalReal" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testReciprocalZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testReciprocalZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarAdd" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarAdd" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarAddInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarAddInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarAddNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarAddNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarDivide" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarDivide" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarDivideNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarDivideNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarDivideZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarDivideZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarMultiply" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarMultiply" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarMultiplyInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarMultiplyInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarMultiplyNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarMultiplyNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarPow" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPow" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarPowInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPowInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarPowNaNBase" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPowNaNBase" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarPowNaNExponent" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPowNaNExponent" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarPowZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarSubtract" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarSubtract" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarSubtractInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarSubtractInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarSubtractNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarSubtractNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSerial" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSerial" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSin" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSin" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSinInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSinInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSinNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSinNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSinhInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSinhInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSinhNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSinhNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSqrt1z" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrt1z" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSqrt1zNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrt1zNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSqrtImaginaryNegative" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtImaginaryNegative" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSqrtImaginaryZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtImaginaryZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSqrtInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSqrtNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSqrtPolar" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtPolar" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSqrtRealNegative" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtRealNegative" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSqrtRealPositive" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtRealPositive" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSqrtRealZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtRealZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSubtract" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSubtract" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSubtractInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSubtractInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSubtractNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSubtractNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testTan" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testTan" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testTanCritical" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testTanCritical" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testTanInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testTanInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testTanNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testTanNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testTanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testTanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testTanhCritical" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testTanhCritical" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testTanhInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testTanhInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testTanhNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testTanhNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest$TestComplex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSerial" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest$TestComplex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSerial" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2Imaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToImaginary" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2ImaginaryFloat" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToImaginary" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2Interleaved" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2InterleavedFloat" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2Real" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToReal" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2RealFloat" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToReal" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#extractComplexFromInterleavedArray" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#extractComplexFromRealArray" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#extractInterleavedFromComplexArray" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#extractRealFloatFromComplexArray" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#extractRealFromComplexArray" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#imaginary2Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testImaginaryToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#initialize" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInitialize" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#polar2Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtPolar" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#real2Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testRealToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#split2Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils$NegativeModulusException#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#altPolar" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#setArrays" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testCExtract" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testComplexToImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToImaginary" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testComplexToInterleaved" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testComplexToReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToReal" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testExtractionMethods" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testImaginaryToComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testImaginaryToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testInitialize" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInitialize" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testInterleavedToComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testPolar2Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testPolar2ComplexInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2ComplexInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testPolar2ComplexNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2ComplexNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testRealToComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testRealToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testSplit2Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Precision" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Precision#equals" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testMath221", "testReciprocalReal" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Precision#equalsWithRelativeTolerance" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnity" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnity#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2", "testPrecondition" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnity#getNumberOfRoots" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testGetNumberOfRoots1", "testGetNumberOfRoots2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnity#getRoot" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnity#isCounterClockwise" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testGetNumberOfRoots1", "testGetNumberOfRoots2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2", "testPrecondition" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest#testComputeRoots" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest#testGetNumberOfRoots1" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testGetNumberOfRoots1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest#testGetNumberOfRoots2" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testGetNumberOfRoots2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest#testGetRootPrecondition1" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testGetRootPrecondition1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest#testGetRootPrecondition2" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testGetRootPrecondition2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest#testPrecondition" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testPrecondition" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.TestUtils" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.TestUtils#assertEquals" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcos", "testAsin", "testAtan", "testCos", "testCosh", "testExp", "testLog", "testLogInf", "testPow", "testPowZero", "testScalarDivideZero", "testScalarPowZero", "testSin", "testSinh", "testSqrt1z", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testTan", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.TestUtils#assertSame" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAcosInf", "testAsinInf", "testAtanInf", "testCosInf", "testCoshInf", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testLogZero", "testPowInf", "testPowZero", "testScalarPowInf", "testScalarPowZero", "testSinInf", "testSinhInf", "testSqrtInf", "testTanCritical", "testTanInf", "testTanhCritical", "testTanhInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testExtractionMethods", "testPolar2ComplexInf", "testPolar2ComplexNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.TestUtils#equalsIncludingNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.TestUtils#serializeAndRecover" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSerial" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.package-info" : {
          "testcases" : { }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.Precision" : {
          "testcases" : { }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#compareTo" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testCompareToEpsilon", "testCompareToMaxUlps" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#equals" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testCompareToEpsilon", "testCompareToMaxUlps", "testEqualsIncludingNaN", "testEqualsIncludingNaNWithAllowedDelta", "testEqualsIncludingNaNWithAllowedUlps", "testEqualsWithAllowedDelta", "testEqualsWithAllowedUlps", "testEqualsWithRelativeTolerance", "testFloatEqualsWithAllowedUlps", "testMath1127", "testMath475" ],
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnitQuaternion", "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#equalsIncludingNaN" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testEqualsIncludingNaN", "testEqualsIncludingNaNWithAllowedDelta", "testEqualsIncludingNaNWithAllowedUlps" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#equalsWithRelativeTolerance" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testEqualsWithRelativeTolerance" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#representableDelta" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testRepresentableDelta" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#round" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testRoundDouble", "testRoundFloat" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#roundUnscaled" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testRoundFloat" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testCompareToEpsilon", "testCompareToMaxUlps", "testEqualsIncludingNaN", "testEqualsIncludingNaNWithAllowedDelta", "testEqualsIncludingNaNWithAllowedUlps", "testEqualsWithAllowedDelta", "testEqualsWithAllowedUlps", "testEqualsWithRelativeTolerance", "testFloatEqualsWithAllowedUlps", "testIssue721", "testMath1127", "testMath475", "testMath843", "testRepresentableDelta", "testRoundDouble", "testRoundFloat" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testCompareToEpsilon" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testCompareToEpsilon" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testCompareToMaxUlps" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testCompareToMaxUlps" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testEqualsIncludingNaN" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testEqualsIncludingNaN" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testEqualsIncludingNaNWithAllowedDelta" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testEqualsIncludingNaNWithAllowedDelta" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testEqualsIncludingNaNWithAllowedUlps" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testEqualsIncludingNaNWithAllowedUlps" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testEqualsWithAllowedDelta" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testEqualsWithAllowedDelta" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testEqualsWithAllowedUlps" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testEqualsWithAllowedUlps" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testEqualsWithRelativeTolerance" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testEqualsWithRelativeTolerance" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testFloatEqualsWithAllowedUlps" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testFloatEqualsWithAllowedUlps" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testIssue721" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testIssue721" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testMath1127" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testMath1127" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testMath475" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testMath475" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testMath843" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testMath843" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testRepresentableDelta" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testRepresentableDelta" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testRoundDouble" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testRoundDouble" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testRoundFloat" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testRoundFloat" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.TestUtils" : {
          "testcases" : { }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.TestUtils#assertEquals" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testRoundDouble", "testRoundFloat" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion" : {
          "testcases" : { }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testGetInverse", "testIsPureQuaternion", "testIsUnitQuaternion", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testWrongDimension" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#add" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAddQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#dotProduct" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testDotProductQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#equals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testObjectEquals", "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getConjugate" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testConjugate", "testNorm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getInverse" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testGetInverse" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getNorm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnitQuaternion", "testNorm", "testNormalize", "testNormalizeFail" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getQ0" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAddQuaternionQuaternion", "testConjugate", "testGetInverse", "testNormalize", "testQuaternionEquals", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getQ1" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAddQuaternionQuaternion", "testConjugate", "testGetInverse", "testNormalize", "testQuaternionEquals", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getQ2" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAddQuaternionQuaternion", "testConjugate", "testGetInverse", "testNormalize", "testQuaternionEquals", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getQ3" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAddQuaternionQuaternion", "testConjugate", "testGetInverse", "testNormalize", "testQuaternionEquals", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getScalarPart" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors2", "testAccessors3", "testNorm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getVectorPart" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors2", "testAccessors3" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#isPureQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsPureQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#isUnitQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnitQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#multiply" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testGetInverse", "testNorm", "testScalarMultiplyDouble" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#normalize" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnitQuaternion", "testNormalize", "testNormalizeFail" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#subtract" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testSubtractQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#toString" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testToString" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testGetInverse", "testIsPureQuaternion", "testIsUnitQuaternion", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testWrongDimension" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testAccessors1" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testAccessors2" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors2" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testAccessors3" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors3" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testAddQuaternionQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAddQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testConjugate" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testConjugate" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testDotProductQuaternionQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testDotProductQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testGetInverse" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testGetInverse" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testIsPureQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsPureQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testIsUnitQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnitQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testNorm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNorm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testNormalize" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNormalize" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testNormalizeFail" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNormalizeFail" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testObjectEquals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testObjectEquals" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testQuaternionEquals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testQuaternionEquals" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testQuaternionEquals2" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testQuaternionEquals2" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testScalarMultiplyDouble" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testScalarMultiplyDouble" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testSubtractQuaternionQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testSubtractQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testToString" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testToString" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testWrongDimension" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testWrongDimension" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.package-info" : {
          "testcases" : { }
        }
      }
    },
    "539279ce0e9de7c68b149afa0a908b72225fd8d8" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "539279ce0e9de7c68b149afa0a908b72225fd8d8~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAcosNaN", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAsinNaN", "testAtan", "testAtanI", "testAtanInf", "testAtanNaN", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosNaN", "testCosh", "testCoshInf", "testCoshNaN", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinNaN", "testSinh", "testSinhInf", "testSinhNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanNaN", "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "b797559e4141da1f649f0594c28b06ce6b338bcb" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "b797559e4141da1f649f0594c28b06ce6b338bcb~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAcosNaN", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAsinNaN", "testAtan", "testAtanI", "testAtanInf", "testAtanNaN", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosNaN", "testCosh", "testCoshInf", "testCoshNaN", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinNaN", "testSinh", "testSinhInf", "testSinhNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanNaN", "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "c5de65a2cedbf7c62d6fcc5a01b5eca35d5e73b2" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "c5de65a2cedbf7c62d6fcc5a01b5eca35d5e73b2~1",
      "changedClazzes" : {
        "org.apache.commons.complex.ComplexFormat" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.ComplexFormatAbstractTest" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.ComplexFormatTest" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.FrenchComplexFormatTest" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.RetryRunner" : {
          "testcases" : { }
        },
        "org.apache.commons.complex.RetryRunnerTest" : {
          "testcases" : { }
        }
      }
    },
    "d5937fa66ddcc3a300e86a788cf252466e402230" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "d5937fa66ddcc3a300e86a788cf252466e402230~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAcosNaN", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAsinNaN", "testAtan", "testAtanI", "testAtanInf", "testAtanNaN", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosNaN", "testCosh", "testCoshInf", "testCoshNaN", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinNaN", "testSinh", "testSinhInf", "testSinhNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanNaN", "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "c12828547e579e83f21824bc36ae202d579463ef" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "c12828547e579e83f21824bc36ae202d579463ef~1",
      "changedClazzes" : {
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testGetInverse", "testIsPureQuaternion", "testIsUnitQuaternion", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testWrongDimension" ]
          }
        }
      }
    },
    "4094c82a9f6c55c03814f648b4b43c5f7e5d0425" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "4094c82a9f6c55c03814f648b4b43c5f7e5d0425~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testReciprocalReciprocal" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testReciprocalReciprocal" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testReciprocalReciprocal" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testReciprocalReciprocal" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#reciprocal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testReciprocalReciprocal" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAcosNaN", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAsinNaN", "testAtan", "testAtanI", "testAtanInf", "testAtanNaN", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosNaN", "testCosh", "testCoshInf", "testCoshNaN", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinNaN", "testSinh", "testSinhInf", "testSinhNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanNaN", "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testReciprocalReciprocal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testReciprocalReciprocal" ]
          }
        }
      }
    },
    "ca71f3559f3b51804dca33dc895c2b89b846f124" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "ca71f3559f3b51804dca33dc895c2b89b846f124~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils" : {
          "testcases" : { }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#addAndCheck" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testAddAndCheck", "testAddAndCheckLong", "testSubAndCheckLong" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#divideUnsigned" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testDivideUnsignedInt", "testDivideUnsignedLong", "testDivideUnsignedLongSpecialCases" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#gcd" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testGcd", "testGcdConsistency", "testGcdLong", "testLcm", "testLcmLong" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testOne", "testZero" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#gcdPositive" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testGcd", "testGcdConsistency", "testLcm" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testOne", "testZero" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#isPowerOfTwo" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testIsPowerOfTwo" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#lcm" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testLcm", "testLcmLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#mulAndCheck" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testLcm", "testLcmLong", "testMulAndCheck", "testMulAndCheckLong", "testPow", "testPowInt", "testPowIntOverflow", "testPowLong", "testPowLongOverflow", "testPowMinusOneInt", "testPowMinusOneLong", "testPowNegativeInt", "testPowNegativeIntOverflow", "testPowNegativeLong", "testPowNegativeLongOverflow", "testPowOneInt", "testPowOneLong" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd", "testDivide", "testMath1261", "testMultiply", "testSubtract" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#pow" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testPow", "testPowInt", "testPowIntOverflow", "testPowLong", "testPowLongOverflow", "testPowMinusOneInt", "testPowMinusOneLong", "testPowNegativeInt", "testPowNegativeIntOverflow", "testPowNegativeLong", "testPowNegativeLongOverflow", "testPowOneInt", "testPowOneLong" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#remainderUnsigned" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testRemainderUnsignedInt", "testRemainderUnsignedLong", "testRemainderUnsignedLongSpecialCases" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#subAndCheck" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testSubAndCheck", "testSubAndCheckErrorMessage", "testSubAndCheckLong" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testSubtract" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testAddAndCheck", "testAddAndCheckLong", "testDivideUnsignedInt", "testDivideUnsignedLong", "testDivideUnsignedLongSpecialCases", "testGcd", "testGcdConsistency", "testGcdLong", "testIsPowerOfTwo", "testLcm", "testLcmLong", "testMulAndCheck", "testMulAndCheckLong", "testPow", "testPowInt", "testPowIntOverflow", "testPowLong", "testPowLongOverflow", "testPowMinusOneInt", "testPowMinusOneLong", "testPowNegativeInt", "testPowNegativeIntOverflow", "testPowNegativeLong", "testPowNegativeLongOverflow", "testPowOneInt", "testPowOneLong", "testRemainderUnsignedInt", "testRemainderUnsignedLong", "testRemainderUnsignedLongSpecialCases", "testSubAndCheck", "testSubAndCheckErrorMessage", "testSubAndCheckLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#divideUnsignedExpected" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testDivideUnsignedLongSpecialCases" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#getLongSpecialCases" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testDivideUnsignedLongSpecialCases", "testRemainderUnsignedLongSpecialCases" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#remainderUnsignedExpected" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testRemainderUnsignedLongSpecialCases" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testAddAndCheck" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testAddAndCheck" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testAddAndCheckLong" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testAddAndCheckLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testAddAndCheckLongFailure" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testAddAndCheckLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testDivideUnsignedInt" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testDivideUnsignedInt" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testDivideUnsignedLong" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testDivideUnsignedLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testDivideUnsignedLongSpecialCases" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testDivideUnsignedLongSpecialCases" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testGcd" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testGcd" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testGcdConsistency" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testGcdConsistency" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testGcdLong" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testGcdLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testIsPowerOfTwo" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testIsPowerOfTwo" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testLcm" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testLcm" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testLcmLong" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testLcmLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testMulAndCheck" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testMulAndCheck" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testMulAndCheckLong" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testMulAndCheckLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testMulAndCheckLongFailure" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testMulAndCheckLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testPow" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testPow" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testPowInt" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testPowInt" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testPowIntOverflow" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testPowIntOverflow" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testPowLong" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testPowLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testPowLongOverflow" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testPowLongOverflow" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testPowMinusOneInt" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testPowMinusOneInt" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testPowMinusOneLong" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testPowMinusOneLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testPowNegativeInt" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testPowNegativeInt" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testPowNegativeIntOverflow" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testPowNegativeIntOverflow" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testPowNegativeLong" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testPowNegativeLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testPowNegativeLongOverflow" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testPowNegativeLongOverflow" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testPowOneInt" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testPowOneInt" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testPowOneLong" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testPowOneLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testRemainderUnsignedInt" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testRemainderUnsignedInt" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testRemainderUnsignedLong" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testRemainderUnsignedLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testRemainderUnsignedLongSpecialCases" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testRemainderUnsignedLongSpecialCases" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testSubAndCheck" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testSubAndCheck" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testSubAndCheckErrorMessage" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testSubAndCheckErrorMessage" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testSubAndCheckLong" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testSubAndCheckLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testSubAndCheckLongFailure" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testSubAndCheckLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#toUnsignedBigInteger" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testDivideUnsignedLongSpecialCases", "testRemainderUnsignedLongSpecialCases" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.NumbersArithmeticException" : {
          "testcases" : { }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.NumbersArithmeticException#<init>" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testAddAndCheck", "testAddAndCheckLong", "testGcd", "testGcdLong", "testLcm", "testLcmLong", "testMulAndCheck", "testMulAndCheckLong", "testPowIntOverflow", "testPowLongOverflow", "testPowNegativeIntOverflow", "testPowNegativeLongOverflow", "testSubAndCheck", "testSubAndCheckErrorMessage", "testSubAndCheckLong" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructor", "testDivide", "testGetReducedFraction", "testGoldenRatio", "testNegativeValueOverflow", "testPositiveValueOverflow", "testReciprocal" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd", "testConstructor", "testDivide", "testGetReducedFraction", "testGoldenRatio", "testIntegerOverflow", "testNegate", "testReciprocal", "testSubtract" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.NumbersArithmeticException#getMessage" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testSubAndCheckErrorMessage" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.TestUtils#serializeAndRecover" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testSerial" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testSerial" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testSerial" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testSerial" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testWholeFormat" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#format" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDoubleFormat", "testLongFormat" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testLongFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#getDefaultNumberFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testWholeFormat" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#getDenominatorFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#getNumeratorFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#parseAndIgnoreWhitespace" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#parseNextCharacter" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#setDenominatorFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDenominatorFormat" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#setNumeratorFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testNumeratorFormat" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testNumeratorFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testOne", "testZero" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseBig", "testParseInteger", "testParseNegative", "testParseProper", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs", "testAdd", "testBigDecimalValue", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testDoubleValueForLargeNumeratorAndDenominator", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testFloatValueForLargeNumeratorAndDenominator", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testLongValue", "testMath340", "testMultiply", "testNegate", "testNegativeValueOverflow", "testPercentage", "testPositiveValueOverflow", "testPow", "testReciprocal", "testSerial", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#abs" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#add" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAdd" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#bigDecimalValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseBig" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testBigDecimalValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#checkNotNull" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testOne", "testZero" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseBig", "testParseInteger", "testParseNegative", "testParseProper", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs", "testAdd", "testBigDecimalValue", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testDoubleValueForLargeNumeratorAndDenominator", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testFloatValueForLargeNumeratorAndDenominator", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testLongValue", "testMath340", "testMultiply", "testNegate", "testNegativeValueOverflow", "testPercentage", "testPositiveValueOverflow", "testPow", "testReciprocal", "testSerial", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#compareTo" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testCompareTo" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#divide" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testDivide" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#doubleValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseBig" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testCompareTo", "testConstructor", "testDoubleValue", "testDoubleValueForLargeNumeratorAndDenominator", "testPercentage" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#equals" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testOne", "testZero" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseBig" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testEqualsAndHashCode", "testGetReducedFraction", "testMath340", "testPow", "testSerial" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#floatValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testFloatValue", "testFloatValueForLargeNumeratorAndDenominator" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#getDenominator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testMath340" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#getDenominatorAsInt" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseNegative", "testParseProper", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs", "testAdd", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testEpsilonLimitConstructor", "testMultiply", "testNegate", "testReciprocal", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#getDenominatorAsLong" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructor", "testConstructorDouble" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#getNumerator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testMath340" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#getNumeratorAsInt" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseNegative", "testParseProper", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs", "testAdd", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testEpsilonLimitConstructor", "testGetReducedFraction", "testMultiply", "testNegate", "testReciprocal", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#getNumeratorAsLong" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructor", "testConstructorDouble" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#getReducedFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testGetReducedFraction" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#hashCode" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testEqualsAndHashCode" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#intValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testIntValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#longValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testLongValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#multiply" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testDivide", "testMath340", "testMultiply", "testPercentage" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#negate" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs", "testNegate", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#percentageValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPercentage" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#pow" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#reciprocal" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testDivide", "testMath340", "testReciprocal" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#reduce" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseBig" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testEqualsAndHashCode", "testGetReducedFraction", "testMath340", "testPow", "testSerial" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#subtract" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionField" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionField#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testOne", "testSerial", "testZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionField#getInstance" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testOne", "testSerial", "testZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionField#getOne" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testOne" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionField#getZero" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionField#readResolve" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testSerial" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionField$LazyHolder#access$000" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testOne", "testSerial", "testZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testOne", "testSerial", "testZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest#testOne" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testOne" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest#testSerial" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testSerial" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest#testZero" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormat" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormat#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormat#format" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormat#getImproperInstance" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormat#getProperInstance" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormat#parse" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormat#parseNextBigInteger" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#getLocale" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#setUp" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testDenominatorFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDenominatorFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testDoubleFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDoubleFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testFormatImproper" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testFormatImproper" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testFormatImproperNegative" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testFormatImproperNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testFormatNegative" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testFormatNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testFormatZero" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testFormatZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testLongFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testLongFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testNumeratorFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testNumeratorFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParse" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParse" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParseBig" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseBig" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParseInteger" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseInteger" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParseInvalid" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseInvalid" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParseInvalidDenominator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseInvalidDenominator" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParseNegative" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParseProper" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseProper" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParseProperInvalidMinus" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseProperInvalidMinus" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParseProperNegative" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseProperNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testWholeFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs", "testAdd", "testBigDecimalValue", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testDoubleValueForLargeNumeratorAndDenominator", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testFloatValueForLargeNumeratorAndDenominator", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testLongValue", "testMath340", "testMultiply", "testNegate", "testNegativeValueOverflow", "testPercentage", "testPositiveValueOverflow", "testPow", "testReciprocal", "testSerial", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#assertFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs", "testAdd", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testEpsilonLimitConstructor", "testMultiply", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testAbs" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testAdd" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAdd" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testBigDecimalValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testBigDecimalValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testCompareTo" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testCompareTo" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testConstructor" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructor" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testConstructorDouble" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructorDouble" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testDigitLimitConstructor" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testDigitLimitConstructor" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testDivide" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testDivide" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testDoubleConstructor" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testDoubleConstructor" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testDoubleValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testDoubleValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testDoubleValueForLargeNumeratorAndDenominator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testDoubleValueForLargeNumeratorAndDenominator" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testEpsilonLimitConstructor" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testEpsilonLimitConstructor" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testEqualsAndHashCode" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testEqualsAndHashCode" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testFloatValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testFloatValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testFloatValueForLargeNumeratorAndDenominator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testFloatValueForLargeNumeratorAndDenominator" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testGetReducedFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testGetReducedFraction" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testGoldenRatio" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testGoldenRatio" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testIntValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testIntValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testLongValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testLongValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testMath340" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testMath340" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testMultiply" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testMultiply" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testNegate" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testNegativeValueOverflow" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testNegativeValueOverflow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testPercentage" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPercentage" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testPositiveValueOverflow" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPositiveValueOverflow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testPow" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testReciprocal" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testReciprocal" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testSerial" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testSerial" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testSubtract" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testOne", "testZero" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#abs" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#add" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#addSub" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#compareTo" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testCompareTo" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#divide" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDivide", "testMath1261" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#doubleValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testCompareTo", "testDoubleValue", "testFloatValue", "testIntValue", "testLongValue", "testMath835", "testPercentage" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#equals" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testOne", "testZero" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testEqualsAndHashCode", "testGetReducedFraction", "testMath1261", "testSerial" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#floatValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testFloatValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#getDenominator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testEpsilonLimitConstructor", "testMultiply", "testNegate", "testReciprocal", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#getNumerator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testEpsilonLimitConstructor", "testGetReducedFraction", "testMultiply", "testNegate", "testReciprocal", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#getReducedFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDivide", "testGetReducedFraction", "testMath1261", "testMultiply" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#hashCode" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testEqualsAndHashCode" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#intValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testIntValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#longValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testLongValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#multiply" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDivide", "testMath1261", "testMultiply" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#negate" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testNegate", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#percentageValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testMath835", "testPercentage" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#reciprocal" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDivide", "testMath1261", "testReciprocal" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#subtract" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#toString" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testToString" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionConversionException" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionConversionException#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructor", "testGoldenRatio", "testNegativeValueOverflow", "testPositiveValueOverflow" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testGoldenRatio", "testIntegerOverflow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionException" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionException#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructor", "testDivide", "testGetReducedFraction", "testGoldenRatio", "testNegativeValueOverflow", "testPositiveValueOverflow", "testReciprocal" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd", "testConstructor", "testDivide", "testGetReducedFraction", "testGoldenRatio", "testIntegerOverflow", "testNegate", "testReciprocal", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionField" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionField#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testOne", "testSerial", "testZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionField#getInstance" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testOne", "testSerial", "testZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionField#getOne" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testOne" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionField#getZero" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionField#readResolve" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testSerial" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionField$LazyHolder#access$000" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testOne", "testSerial", "testZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testOne", "testSerial", "testZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest#testOne" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testOne" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest#testSerial" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testSerial" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest#testZero" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormat" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormat#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormat#format" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormat#getImproperInstance" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormat#getProperInstance" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormat#parse" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#getLocale" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#setUp" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testDenominatorFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testDoubleFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testFormatImproper" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testFormatImproper" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testFormatImproperNegative" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testFormatImproperNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testFormatNegative" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testFormatNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testFormatZero" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testFormatZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testLongFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testLongFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testNumeratorFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testNumeratorFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParse" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParse" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseInteger" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInteger" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseInvalid" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInvalid" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseInvalidDenominator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInvalidDenominator" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseNegative" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseOne1" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseOne1" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseOne2" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseOne2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseProper" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseProper" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseProperInvalidMinus" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseProperInvalidMinus" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseProperNegative" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseProperNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseZero1" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseZero1" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseZero2" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testWholeFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionOverflowException" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionOverflowException#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd", "testConstructor", "testNegate", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionParseException" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionParseException#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#assertFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testEpsilonLimitConstructor", "testMultiply", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#checkIntegerOverflow" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testIntegerOverflow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testAbs" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testAdd" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testCompareTo" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testCompareTo" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testConstructor" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testConstructor" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testConstructorDouble" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testConstructorDouble" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testDigitLimitConstructor" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDigitLimitConstructor" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testDivide" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDivide" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testDoubleConstructor" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDoubleConstructor" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testDoubleValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDoubleValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testEpsilonLimitConstructor" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testEpsilonLimitConstructor" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testEqualsAndHashCode" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testEqualsAndHashCode" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testFloatValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testFloatValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testGetReducedFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testGetReducedFraction" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testGoldenRatio" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testGoldenRatio" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testIntValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testIntValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testIntegerOverflow" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testIntegerOverflow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testLongValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testLongValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testMath1261" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testMath1261" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testMath835" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testMath835" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testMultiply" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testMultiply" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testNegate" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testPercentage" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testPercentage" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testReciprocal" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testReciprocal" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testSerial" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testSerial" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testSubtract" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testToString" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testToString" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperBigFractionFormat" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperBigFractionFormat#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperBigFractionFormat#format" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperBigFractionFormat#getWholeFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testFormatImproper", "testFormatImproperNegative", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperBigFractionFormat#parse" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperBigFractionFormat#setWholeFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperFractionFormat" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperFractionFormat#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperFractionFormat#format" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperFractionFormat#getWholeFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testFormatImproper", "testFormatImproperNegative", "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperFractionFormat#parse" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperFractionFormat#setWholeFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ZeroDenominatorException" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ZeroDenominatorException#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructor", "testDivide", "testGetReducedFraction", "testReciprocal" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testGetReducedFraction", "testReciprocal" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.package-info" : {
          "testcases" : { }
        }
      }
    },
    "dca007d2226649a55bd3ee512580ca63d7354e56" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "dca007d2226649a55bd3ee512580ca63d7354e56~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testAddAndCheck", "testAddAndCheckLong", "testDivideUnsignedInt", "testDivideUnsignedLong", "testDivideUnsignedLongSpecialCases", "testGcd", "testGcdConsistency", "testGcdLong", "testIsPowerOfTwo", "testLcm", "testLcmLong", "testMulAndCheck", "testMulAndCheckLong", "testPow", "testPowInt", "testPowIntOverflow", "testPowLong", "testPowLongOverflow", "testPowMinusOneInt", "testPowMinusOneLong", "testPowNegativeInt", "testPowNegativeIntOverflow", "testPowNegativeLong", "testPowNegativeLongOverflow", "testPowOneInt", "testPowOneLong", "testRemainderUnsignedInt", "testRemainderUnsignedLong", "testRemainderUnsignedLongSpecialCases", "testSubAndCheck", "testSubAndCheckErrorMessage", "testSubAndCheckLong" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPow" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testOne", "testZero" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testAddAndCheck" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testAddAndCheck" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testAddAndCheckLongFailure(long,long)" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testAddAndCheckLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testGcd" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testGcd" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testGcdLong" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testGcdLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testLcm" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testLcm" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testLcmLong" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testLcmLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testMulAndCheck" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testMulAndCheck" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testMulAndCheckLongFailure(long,long)" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testMulAndCheckLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testSubAndCheck" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testSubAndCheck" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testSubAndCheckErrorMessage" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testSubAndCheckErrorMessage" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest#testSubAndCheckLongFailure(long,long)" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testSubAndCheckLong" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.NumbersArithmeticException" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testAddAndCheck", "testAddAndCheckLong", "testGcd", "testGcdLong", "testLcm", "testLcmLong", "testMulAndCheck", "testMulAndCheckLong", "testPowIntOverflow", "testPowLongOverflow", "testPowNegativeIntOverflow", "testPowNegativeLongOverflow", "testSubAndCheck", "testSubAndCheckErrorMessage", "testSubAndCheckLong" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructor", "testDivide", "testGetReducedFraction", "testGoldenRatio", "testNegativeValueOverflow", "testPositiveValueOverflow", "testReciprocal" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd", "testConstructor", "testDivide", "testGetReducedFraction", "testGoldenRatio", "testIntegerOverflow", "testNegate", "testReciprocal", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testDivide" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testDivide" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionException" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructor", "testDivide", "testGetReducedFraction", "testGoldenRatio", "testNegativeValueOverflow", "testPositiveValueOverflow", "testReciprocal" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd", "testConstructor", "testDivide", "testGetReducedFraction", "testGoldenRatio", "testIntegerOverflow", "testNegate", "testReciprocal", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testAdd" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testConstructor" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testConstructor" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testDivide" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDivide" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testNegate" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testSubtract" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testSubtract" ]
          }
        }
      }
    },
    "fbb60fbf90c4912492c748bca6638ccbcad399bd" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "fbb60fbf90c4912492c748bca6638ccbcad399bd~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testAddAndCheck", "testAddAndCheckLong", "testDivideUnsignedInt", "testDivideUnsignedLong", "testDivideUnsignedLongSpecialCases", "testGcd", "testGcdConsistency", "testGcdLong", "testIsPowerOfTwo", "testLcm", "testLcmLong", "testMulAndCheck", "testMulAndCheckLong", "testPow", "testPowInt", "testPowIntOverflow", "testPowLong", "testPowLongOverflow", "testPowMinusOneInt", "testPowMinusOneLong", "testPowNegativeInt", "testPowNegativeIntOverflow", "testPowNegativeLong", "testPowNegativeLongOverflow", "testPowOneInt", "testPowOneLong", "testRemainderUnsignedInt", "testRemainderUnsignedLong", "testRemainderUnsignedLongSpecialCases", "testSubAndCheck", "testSubAndCheckErrorMessage", "testSubAndCheckLong" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPow" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : [ "testOne", "testZero" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        }
      }
    },
    "aebd665f713932a665fb886ba58c866536f1c94b" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "2376972689063b7f6f8708c49c138b25b4710310" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "fbb60fbf90c4912492c748bca6638ccbcad399bd",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Precision" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testMath221", "testReciprocalReal" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils" : {
          "testcases" : { }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : {
          "testcases" : { }
        }
      }
    },
    "41e2f65b34c978f4377b2f043fec28a61402962d" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "41e2f65b34c978f4377b2f043fec28a61402962d~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#addAndCheck" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#gcd" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#gcdPositive" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#mulAndCheck" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd", "testDivide", "testMath1261", "testMultiply", "testSubtract" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#pow" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#subAndCheck" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testSubtract" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils$NumbersArithmeticException#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd", "testDivide", "testSubtract" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.TestUtils#serializeAndRecover" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testSerial" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#format" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testLongFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#getDefaultNumberFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#getDenominatorFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#getNumeratorFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#parseAndIgnoreWhitespace" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.AbstractFormat#parseNextCharacter" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : [ "testOne", "testZero" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseBig", "testParseInteger", "testParseNegative", "testParseProper", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs", "testAdd", "testBigDecimalValue", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testDoubleValueForLargeNumeratorAndDenominator", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testFloatValueForLargeNumeratorAndDenominator", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testLongValue", "testMath340", "testMultiply", "testNegate", "testNegativeValueOverflow", "testPercentage", "testPositiveValueOverflow", "testReciprocal", "testSerial", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#checkNotNull" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#equals" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#pow" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#reduce" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseBig", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs", "testAdd", "testBigDecimalValue", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testDoubleValueForLargeNumeratorAndDenominator", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testFloatValueForLargeNumeratorAndDenominator", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testLongValue", "testMath340", "testMultiply", "testNegate", "testNegativeValueOverflow", "testPercentage", "testPositiveValueOverflow", "testPow", "testReciprocal", "testSerial", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testPow" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#abs" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#add" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#addSub" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#compareTo" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testCompareTo" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#divide" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDivide", "testMath1261" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#doubleValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testCompareTo", "testDoubleValue", "testFloatValue", "testIntValue", "testLongValue", "testMath835", "testPercentage" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#equals" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testEqualsAndHashCode", "testGetReducedFraction", "testMath1261", "testSerial" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#floatValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testFloatValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#getDenominator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testEpsilonLimitConstructor", "testMultiply", "testNegate", "testReciprocal", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#getNumerator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testEpsilonLimitConstructor", "testGetReducedFraction", "testMultiply", "testNegate", "testReciprocal", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#getReducedFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDivide", "testGetReducedFraction", "testMath1261", "testMultiply" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#hashCode" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testEqualsAndHashCode" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#intValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testIntValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#longValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testLongValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#multiply" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDivide", "testMath1261", "testMultiply" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#negate" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testNegate", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#percentageValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testMath835", "testPercentage" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#reciprocal" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDivide", "testMath1261", "testReciprocal" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#subtract" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#toString" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testToString" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionConversionException" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructor", "testGoldenRatio", "testNegativeValueOverflow", "testPositiveValueOverflow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionException" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructor", "testDivide", "testGetReducedFraction", "testGoldenRatio", "testNegativeValueOverflow", "testPositiveValueOverflow", "testReciprocal" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProperInvalidMinus" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionException#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd", "testConstructor", "testDivide", "testGetReducedFraction", "testGoldenRatio", "testIntegerOverflow", "testNegate", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat", "testNumeratorFormat", "testParseInvalid", "testParseInvalidDenominator", "testParseProperInvalidMinus", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormat#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormat#format" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormat#getImproperInstance" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormat#getProperInstance" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormat#parse" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDenominatorFormat", "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testNumeratorFormat", "testParse", "testParseInteger", "testParseInvalid", "testParseInvalidDenominator", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative", "testParseZero1", "testParseZero2", "testWholeFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#getLocale" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#setUp" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testDoubleFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testFormatImproper" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testFormatImproper" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testFormatImproperNegative" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testFormatImproperNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testFormatNegative" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testFormatNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testFormatZero" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testFormatZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testLongFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testLongFormat" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParse" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParse" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseInteger" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInteger" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseNegative" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseOne1" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseOne1" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseOne2" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseOne2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseProper" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseProper" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseProperNegative" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseProperNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseZero1" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseZero1" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseZero2" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionOverflowException" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionParseException" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProperInvalidMinus" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionParseException#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseProper", "testParseProperNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#assertFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testEpsilonLimitConstructor", "testMultiply", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#checkIntegerOverflow" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testIntegerOverflow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testAbs" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testAdd" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testCompareTo" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testCompareTo" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testConstructor" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testConstructor" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testConstructorDouble" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testConstructorDouble" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testDigitLimitConstructor" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDigitLimitConstructor" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testDivide" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDivide" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testDoubleConstructor" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDoubleConstructor" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testDoubleValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDoubleValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testEpsilonLimitConstructor" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testEpsilonLimitConstructor" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testEqualsAndHashCode" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testEqualsAndHashCode" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testFloatValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testFloatValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testGetReducedFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testGetReducedFraction" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testGoldenRatio" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testGoldenRatio" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testIntValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testIntValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testIntegerOverflow" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testIntegerOverflow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testLongValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testLongValue" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testMath1261" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testMath1261" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testMath835" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testMath835" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testMultiply" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testMultiply" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testNegate" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testPercentage" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testPercentage" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testReciprocal" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testReciprocal" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testSerial" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testSerial" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testSubtract" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testToString" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testToString" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperFractionFormat#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperFractionFormat#format" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperFractionFormat#getWholeFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testFormatImproper", "testFormatImproperNegative", "testParseProper", "testParseProperNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperFractionFormat#parse" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ProperFractionFormat#setWholeFormat" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ZeroDenominatorException" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructor", "testDivide", "testGetReducedFraction", "testReciprocal" ]
          }
        }
      }
    },
    "ec826b0fc1ae6d731d3b848cf9f60f676c4bc261" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "ec826b0fc1ae6d731d3b848cf9f60f676c4bc261~1",
      "changedClazzes" : {
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParseInvalid" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseInvalid" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParseInvalidDenominator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseInvalidDenominator" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParseProper" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseProper" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParseProperInvalidMinus" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseProperInvalidMinus" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParseProperNegative" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseProperNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#<init>(int,int)" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#getReducedFraction(int,int)" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testDivide", "testGetReducedFraction", "testMath1261", "testMultiply" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionException" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructor", "testDivide", "testGetReducedFraction", "testGoldenRatio", "testNegativeValueOverflow", "testPositiveValueOverflow", "testReciprocal" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd", "testConstructor", "testDivide", "testGetReducedFraction", "testGoldenRatio", "testIntegerOverflow", "testNegate", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParse" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParse" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseInvalid" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInvalid" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseInvalidDenominator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInvalidDenominator" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseProper" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseProper" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseProperInvalidMinus" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseProperInvalidMinus" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest#testParseProperNegative" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseProperNegative" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionParseException" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ]
          }
        }
      }
    },
    "16352312bac6661d4facd234f6d00dd4ed37ff58" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "16352312bac6661d4facd234f6d00dd4ed37ff58~1",
      "changedClazzes" : {
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseBig", "testParseInteger", "testParseNegative", "testParseProper", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs", "testAdd", "testBigDecimalValue", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testDoubleValueForLargeNumeratorAndDenominator", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testFloatValueForLargeNumeratorAndDenominator", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testLongValue", "testMath340", "testMultiply", "testNegate", "testNegativeValueOverflow", "testPercentage", "testPositiveValueOverflow", "testPow", "testReciprocal", "testSerial", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionField" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFieldTest" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionField" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFieldTest" : {
          "testcases" : { }
        }
      }
    },
    "985d44fca746154042730c3b2743678f5df934ae" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "985d44fca746154042730c3b2743678f5df934ae~1",
      "changedClazzes" : {
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseBig", "testParseInteger", "testParseNegative", "testParseProper", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs", "testAdd", "testBigDecimalValue", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testDoubleValueForLargeNumeratorAndDenominator", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testFloatValueForLargeNumeratorAndDenominator", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testLongValue", "testMath340", "testMultiply", "testNegate", "testNegativeValueOverflow", "testPercentage", "testPositiveValueOverflow", "testPow", "testReciprocal", "testSerial", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionException" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testConstructor", "testDivide", "testGetReducedFraction", "testGoldenRatio", "testNegativeValueOverflow", "testPositiveValueOverflow", "testReciprocal" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd", "testConstructor", "testDivide", "testGetReducedFraction", "testGoldenRatio", "testIntegerOverflow", "testNegate", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionParseException" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testParseInvalid", "testParseInvalidDenominator", "testParseProper", "testParseProperInvalidMinus", "testParseProperNegative" ]
          }
        }
      }
    },
    "857033738c5f470289f3ff4ea325e5b7f6adae52" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "b37c9f195f28f897eadadaf1f2df86bca0b8ce7c" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "b37c9f195f28f897eadadaf1f2df86bca0b8ce7c~1",
      "changedClazzes" : {
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testDoubleValueForLargeNumeratorAndSmallDenominator", "testFloatValueForLargeNumeratorAndSmallDenominator" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#checkNotNull" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testDoubleValueForLargeNumeratorAndSmallDenominator", "testFloatValueForLargeNumeratorAndSmallDenominator" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#doubleValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseBig" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testCompareTo", "testConstructor", "testDoubleValue", "testDoubleValueForLargeNumeratorAndDenominator", "testDoubleValueForLargeNumeratorAndSmallDenominator", "testPercentage" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#floatValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testFloatValue", "testFloatValueForLargeNumeratorAndDenominator", "testFloatValueForLargeNumeratorAndSmallDenominator" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs", "testAdd", "testBigDecimalValue", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testDoubleValueForLargeNumeratorAndDenominator", "testDoubleValueForLargeNumeratorAndSmallDenominator", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testFloatValueForLargeNumeratorAndDenominator", "testFloatValueForLargeNumeratorAndSmallDenominator", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testLongValue", "testMath340", "testMultiply", "testNegate", "testNegativeValueOverflow", "testPercentage", "testPositiveValueOverflow", "testPow", "testReciprocal", "testSerial", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testDoubleValueForLargeNumeratorAndSmallDenominator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testDoubleValueForLargeNumeratorAndSmallDenominator" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testFloatValueForLargeNumeratorAndSmallDenominator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testFloatValueForLargeNumeratorAndSmallDenominator" ]
          }
        }
      }
    },
    "1b979e5de9e23fbaed4775cc487fbce3f895e740" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "ea52aa8cb3b0a9935ca0496aac482352b6e2c5ab" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "ea52aa8cb3b0a9935ca0496aac482352b6e2c5ab~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAcosNaN", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAsinNaN", "testAtan", "testAtanI", "testAtanInf", "testAtanNaN", "testConjugate", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosNaN", "testCosh", "testCoshInf", "testCoshNaN", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinNaN", "testSinh", "testSinhInf", "testSinhNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanNaN", "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAcosNaN", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAsinNaN", "testAtan", "testAtanI", "testAtanInf", "testAtanNaN", "testConjugate", "testConjugateInfinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosNaN", "testCosh", "testCoshInf", "testCoshNaN", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinNaN", "testSinh", "testSinhInf", "testSinhNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanNaN", "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testConjugateInfinite" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest$TestComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSerial" ]
          }
        }
      }
    },
    "70a1156a13a4520a5157eb5697795de7c881b921" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "70a1156a13a4520a5157eb5697795de7c881b921~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtPolar" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        }
      }
    },
    "e2668df11371dee73f6f2d64e33faecf02f12306" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "e2668df11371dee73f6f2d64e33faecf02f12306~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtPolar" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        }
      }
    },
    "4e1339eec8f100236f7aac310f797f87c986b47e" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "9602e36b262f41036c3204b55f1addb91769573f" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "e2668df11371dee73f6f2d64e33faecf02f12306",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAcosNaN", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAsinNaN", "testAtan", "testAtanI", "testAtanInf", "testAtanNaN", "testConjugate", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosNaN", "testCosh", "testCoshInf", "testCoshNaN", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinNaN", "testSinh", "testSinhInf", "testSinhNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanNaN", "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfiinite", "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#checkNotNull" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfiinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfiinite", "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#exp" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfiinite", "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#isInfinite" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#log" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#multiply" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#pow" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAcosNaN", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAsinNaN", "testAtan", "testAtanI", "testAtanInf", "testAtanNaN", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosNaN", "testCosh", "testCoshInf", "testCoshNaN", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinNaN", "testSinh", "testSinhInf", "testSinhNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanNaN", "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testConjugateInfiinite" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfiinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testPowZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarPowZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtPolar" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.TestUtils#assertEquals" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.TestUtils#assertSame" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#equals" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testGoldenRatio" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#doubleValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseBig" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testCompareTo", "testConstructor", "testDoubleValue", "testDoubleValueForLargeNumeratorAndDenominator", "testDoubleValueForLargeNumeratorAndSmallDenominator", "testPercentage" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#floatValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testFloatValue", "testFloatValueForLargeNumeratorAndDenominator", "testFloatValueForLargeNumeratorAndSmallDenominator" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs", "testAdd", "testBigDecimalValue", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testDoubleValueForLargeNumeratorAndDenominator", "testDoubleValueForLargeNumeratorAndSmallDenominator", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testFloatValueForLargeNumeratorAndDenominator", "testFloatValueForLargeNumeratorAndSmallDenominator", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testLongValue", "testMath340", "testMultiply", "testNegate", "testNegativeValueOverflow", "testPercentage", "testPositiveValueOverflow", "testPow", "testReciprocal", "testSerial", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFraction" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFraction#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testGoldenRatio" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFraction#evaluate" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testGoldenRatio" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testGoldenRatio" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest#testGoldenRatio" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testGoldenRatio" ]
          }
        }
      }
    },
    "e3399d1bab7065bdad7ebac80db184b5ef758808" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "e3399d1bab7065bdad7ebac80db184b5ef758808~1",
      "changedClazzes" : {
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testGoldenRatio" ]
          }
        }
      }
    },
    "09dc0163ea14b0bb247d8a4fd0ea17dac9938fa2" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "09dc0163ea14b0bb247d8a4fd0ea17dac9938fa2~1",
      "changedClazzes" : {
        "commons-numbers-primes§org.apache.commons.numbers.primes.Primes" : {
          "testcases" : { }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.Primes#isPrime" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testIsPrime", "testNextPrime" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.Primes#nextPrime" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testNextPrime" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.Primes#primeFactors" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testIsPrime", "testNextPrime", "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest#assertNextPrimeException" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testNextPrime" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest#assertPrimeFactorsException" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest#checkPrimeFactors" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest#product" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest#testIsPrime" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testIsPrime" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest#testNextPrime" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testNextPrime" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest#testPrimeFactors" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes" : {
          "testcases" : { }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes#boundedTrialDivision" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes#millerRabinPrimeTest" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testIsPrime", "testNextPrime" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes#smallTrialDivision" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes#trialDivision" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.package-info" : {
          "testcases" : { }
        }
      }
    },
    "9e54e498d16400fdfcf7930ea4f60c42a9f10c85" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "9e54e498d16400fdfcf7930ea4f60c42a9f10c85~1",
      "changedClazzes" : {
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes#boundedTrialDivision" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "boundedTrialDivision_square", "boundedTrialDivision_twoDifferentFactors", "trialDivision_largeComposite", "trialDivision_veryLargeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes#millerRabinPrimeTest" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "millerRabinPrimeTest_composites", "millerRabinPrimeTest_primes" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes#smallTrialDivision" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "smallTrialDivision_BoundaryPrimes", "smallTrialDivision_largeComposite", "smallTrialDivision_noSmallPrimeFactors", "smallTrialDivision_oneFactor", "smallTrialDivision_repeatedFactors", "smallTrialDivision_smallComposite", "trialDivision_largeComposite", "trialDivision_oneSmallFactor", "trialDivision_repeatedFactors", "trialDivision_smallComposite", "trialDivision_veryLargeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes#trialDivision" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "trialDivision_largeComposite", "trialDivision_oneSmallFactor", "trialDivision_repeatedFactors", "trialDivision_smallComposite", "trialDivision_veryLargeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "boundedTrialDivision_square", "boundedTrialDivision_twoDifferentFactors", "millerRabinPrimeTest_composites", "millerRabinPrimeTest_primes", "smallTrialDivision_BoundaryPrimes", "smallTrialDivision_largeComposite", "smallTrialDivision_noSmallPrimeFactors", "smallTrialDivision_oneFactor", "smallTrialDivision_repeatedFactors", "smallTrialDivision_smallComposite", "trialDivision_largeComposite", "trialDivision_oneSmallFactor", "trialDivision_repeatedFactors", "trialDivision_smallComposite", "trialDivision_veryLargeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#boundedTrialDivision_square" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "boundedTrialDivision_square" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#boundedTrialDivision_twoDifferentFactors" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "boundedTrialDivision_twoDifferentFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#millerRabinPrimeTest_composites" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "millerRabinPrimeTest_composites" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#millerRabinPrimeTest_primes" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "millerRabinPrimeTest_primes" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#smallTrialDivision_BoundaryPrimes" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "smallTrialDivision_BoundaryPrimes" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#smallTrialDivision_largeComposite" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "smallTrialDivision_largeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#smallTrialDivision_noSmallPrimeFactors" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "smallTrialDivision_noSmallPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#smallTrialDivision_oneFactor" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "smallTrialDivision_oneFactor" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#smallTrialDivision_repeatedFactors" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "smallTrialDivision_repeatedFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#smallTrialDivision_smallComposite" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "smallTrialDivision_smallComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#trialDivision_largeComposite" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "trialDivision_largeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#trialDivision_oneSmallFactor" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "trialDivision_oneSmallFactor" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#trialDivision_repeatedFactors" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "trialDivision_repeatedFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#trialDivision_smallComposite" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "trialDivision_smallComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#trialDivision_veryLargeComposite" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "trialDivision_veryLargeComposite" ]
          }
        }
      }
    },
    "193b4f93df0e11dc2602ebc5ea3bc2c4427df5e0" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "193b4f93df0e11dc2602ebc5ea3bc2c4427df5e0~1",
      "changedClazzes" : {
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testGoldenRatio" ]
          }
        }
      }
    },
    "608307bc5ae1201ba28802e39db157e8aab67ff4" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "608307bc5ae1201ba28802e39db157e8aab67ff4~1",
      "changedClazzes" : {
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testGoldenRatio" ]
          }
        }
      }
    },
    "1eaba643f59be9ebd2907c670f6f6cd07bbfd3f9" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "1eaba643f59be9ebd2907c670f6f6cd07bbfd3f9~1",
      "changedClazzes" : {
        "commons-numbers-primes§org.apache.commons.numbers.primes.Primes" : {
          "testcases" : { }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.Primes#isPrime" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testIsPrime", "testNextPrime" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.Primes#nextPrime" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testNextPrime" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.Primes#primeFactors" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testIsPrime", "testNextPrime", "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest#assertNextPrimeException" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testNextPrime" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest#assertPrimeFactorsException" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest#checkPrimeFactors" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest#product" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest#testIsPrime" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testIsPrime" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest#testNextPrime" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testNextPrime" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest#testPrimeFactors" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes" : {
          "testcases" : { }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes#boundedTrialDivision" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ],
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "boundedTrialDivision_square", "boundedTrialDivision_twoDifferentFactors", "trialDivision_largeComposite", "trialDivision_veryLargeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes#millerRabinPrimeTest" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testIsPrime", "testNextPrime" ],
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "millerRabinPrimeTest_composites", "millerRabinPrimeTest_primes" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes#smallTrialDivision" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ],
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "smallTrialDivision_BoundaryPrimes", "smallTrialDivision_largeComposite", "smallTrialDivision_noSmallPrimeFactors", "smallTrialDivision_oneFactor", "smallTrialDivision_repeatedFactors", "smallTrialDivision_smallComposite", "trialDivision_largeComposite", "trialDivision_oneSmallFactor", "trialDivision_repeatedFactors", "trialDivision_smallComposite", "trialDivision_veryLargeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes#trialDivision" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testPrimeFactors" ],
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "trialDivision_largeComposite", "trialDivision_oneSmallFactor", "trialDivision_repeatedFactors", "trialDivision_smallComposite", "trialDivision_veryLargeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "boundedTrialDivision_square", "boundedTrialDivision_twoDifferentFactors", "millerRabinPrimeTest_composites", "millerRabinPrimeTest_primes", "smallTrialDivision_BoundaryPrimes", "smallTrialDivision_largeComposite", "smallTrialDivision_noSmallPrimeFactors", "smallTrialDivision_oneFactor", "smallTrialDivision_repeatedFactors", "smallTrialDivision_smallComposite", "trialDivision_largeComposite", "trialDivision_oneSmallFactor", "trialDivision_repeatedFactors", "trialDivision_smallComposite", "trialDivision_veryLargeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#boundedTrialDivision_square" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "boundedTrialDivision_square" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#boundedTrialDivision_twoDifferentFactors" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "boundedTrialDivision_twoDifferentFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#millerRabinPrimeTest_composites" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "millerRabinPrimeTest_composites" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#millerRabinPrimeTest_primes" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "millerRabinPrimeTest_primes" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#smallTrialDivision_BoundaryPrimes" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "smallTrialDivision_BoundaryPrimes" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#smallTrialDivision_largeComposite" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "smallTrialDivision_largeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#smallTrialDivision_noSmallPrimeFactors" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "smallTrialDivision_noSmallPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#smallTrialDivision_oneFactor" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "smallTrialDivision_oneFactor" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#smallTrialDivision_repeatedFactors" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "smallTrialDivision_repeatedFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#smallTrialDivision_smallComposite" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "smallTrialDivision_smallComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#trialDivision_largeComposite" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "trialDivision_largeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#trialDivision_oneSmallFactor" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "trialDivision_oneSmallFactor" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#trialDivision_repeatedFactors" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "trialDivision_repeatedFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#trialDivision_smallComposite" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "trialDivision_smallComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest#trialDivision_veryLargeComposite" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "trialDivision_veryLargeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.package-info" : {
          "testcases" : { }
        }
      }
    },
    "410abd7fa4f63d8c2d297b62181ddfeeb44da869" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "07bbda2fd6f19980f102d37601e61c06d2b98283" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "ec66bced51bc44a50575584a0b98938730aef417",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAcosNaN", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAsinNaN", "testAtan", "testAtanI", "testAtanInf", "testAtanNaN", "testConjugate", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosNaN", "testCosh", "testCoshInf", "testCoshNaN", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinNaN", "testSinh", "testSinhInf", "testSinhNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanNaN", "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAcosNaN", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAsinNaN", "testAtan", "testAtanI", "testAtanInf", "testAtanNaN", "testConjugate", "testConjugateInfinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosNaN", "testCosh", "testCoshInf", "testCoshNaN", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinNaN", "testSinh", "testSinhInf", "testSinhNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanNaN", "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testConjugateInfinite" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtPolar" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        }
      }
    },
    "b2df9248d8e2e36732a535d92b0ff629e47d1694" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "b2df9248d8e2e36732a535d92b0ff629e47d1694~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAcosNaN", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAsinNaN", "testAtan", "testAtanI", "testAtanInf", "testAtanNaN", "testConjugate", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosNaN", "testCosh", "testCoshInf", "testCoshNaN", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinNaN", "testSinh", "testSinhInf", "testSinhNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanNaN", "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfiinite", "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#checkNotNull" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfiinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfiinite", "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#exp" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfiinite", "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#isInfinite" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#log" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#multiply" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#pow" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfiinite", "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testConjugateInfiinite" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfiinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testPowZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarPowZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.TestUtils#assertEquals" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.TestUtils#assertSame" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testPowZero", "testScalarPowZero" ]
          }
        }
      }
    },
    "4f28fca006f6e9076c8e52c42dbb6b0682ea3166" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "4f28fca006f6e9076c8e52c42dbb6b0682ea3166~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAcosNaN", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAsinNaN", "testAtan", "testAtanI", "testAtanInf", "testAtanNaN", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosNaN", "testCosh", "testCoshInf", "testCoshNaN", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinNaN", "testSinh", "testSinhInf", "testSinhNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanNaN", "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "15136c2d6b6112ae6fa60c1eb644ce70f675b4c5" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "bd596bee4baa18c2e930a738e5a33cdeed04535f" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "4f28fca006f6e9076c8e52c42dbb6b0682ea3166",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsInfinite", "testAbsNaN", "testAcos", "testAcosInf", "testAcosNaN", "testAdd", "testAddInf", "testAddNaN", "testAsin", "testAsinInf", "testAsinNaN", "testAtan", "testAtanI", "testAtanInf", "testAtanNaN", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testCos", "testCosInf", "testCosNaN", "testCosh", "testCoshInf", "testCoshNaN", "testDivide", "testDivideImaginary", "testDivideInf", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNaN", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testExpNaN", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogInf", "testLogNaN", "testLogZero", "testMath221", "testMultiply", "testMultiplyInfInf", "testMultiplyNaN", "testMultiplyNaNInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_NAN_Inf", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testPowNaNBase", "testPowNaNExponent", "testPowZero", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowInf", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarPowZero", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSerial", "testSin", "testSinInf", "testSinNaN", "testSinh", "testSinhInf", "testSinhNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtInf", "testSqrtNaN", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testSubtractNaN", "testTan", "testTanCritical", "testTanInf", "testTanNaN", "testTanh", "testTanhCritical", "testTanhInf", "testTanhNaN" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.Primes" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testIsPrime", "testNextPrime", "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testIsPrime", "testNextPrime", "testPrimeFactors" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testIsPrime", "testNextPrime", "testPrimeFactors" ],
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "boundedTrialDivision_square", "boundedTrialDivision_twoDifferentFactors", "millerRabinPrimeTest_composites", "millerRabinPrimeTest_primes", "smallTrialDivision_BoundaryPrimes", "smallTrialDivision_largeComposite", "smallTrialDivision_noSmallPrimeFactors", "smallTrialDivision_oneFactor", "smallTrialDivision_repeatedFactors", "smallTrialDivision_smallComposite", "trialDivision_largeComposite", "trialDivision_oneSmallFactor", "trialDivision_repeatedFactors", "trialDivision_smallComposite", "trialDivision_veryLargeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "boundedTrialDivision_square", "boundedTrialDivision_twoDifferentFactors", "millerRabinPrimeTest_composites", "millerRabinPrimeTest_primes", "smallTrialDivision_BoundaryPrimes", "smallTrialDivision_largeComposite", "smallTrialDivision_noSmallPrimeFactors", "smallTrialDivision_oneFactor", "smallTrialDivision_repeatedFactors", "smallTrialDivision_smallComposite", "trialDivision_largeComposite", "trialDivision_oneSmallFactor", "trialDivision_repeatedFactors", "trialDivision_smallComposite", "trialDivision_veryLargeComposite" ]
          }
        },
        "commons-numbers-primes§org.apache.commons.numbers.primes.package-info" : {
          "testcases" : { }
        }
      }
    },
    "0c9f1cde2f639d537306e8cbe6d8dd54d0374720" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "0c9f1cde2f639d537306e8cbe6d8dd54d0374720~1",
      "changedClazzes" : {
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Digamma" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Digamma#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest" : [ "testDigammaLargeArgs", "testDigammaNonRealArgs", "testDigammaSmallArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest" : [ "testDigammaLargeArgs", "testDigammaNonRealArgs", "testDigammaSmallArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest#checkRelativeError" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest" : [ "testDigammaSmallArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest#testDigammaLargeArgs" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest" : [ "testDigammaLargeArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest#testDigammaNonRealArgs" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest" : [ "testDigammaNonRealArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest#testDigammaSmallArgs" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest" : [ "testDigammaSmallArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Gamma" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Gamma#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : [ "testGamma", "testGammaNegativeDouble", "testGammaNegativeInteger" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaException" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaException#<init>" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1Test" : [ "testInvGamma1pm1Precondition1", "testInvGamma1pm1Precondition2" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest" : [ "testLogGamma1pPrecondition1", "testLogGamma1pPrecondition2" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : [ "testGamma", "testGammaNegativeDouble", "testGammaNegativeInteger" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest#testGamma" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : [ "testGamma" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest#testGammaNegativeDouble" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : [ "testGammaNegativeDouble" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest#testGammaNegativeInteger" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : [ "testGammaNegativeInteger" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1#<init>" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : [ "testGamma", "testGammaNegativeDouble" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1Test" : [ "testInvGamma1pm1", "testInvGamma1pm1Precondition1", "testInvGamma1pm1Precondition2" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest" : [ "testLogGamma1p" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGamma", "testLogGammaPositive" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1Test" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1Test" : [ "testInvGamma1pm1", "testInvGamma1pm1Precondition1", "testInvGamma1pm1Precondition2" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1Test#testInvGamma1pm1" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1Test" : [ "testInvGamma1pm1" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1Test#testInvGamma1pm1Precondition1" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1Test" : [ "testInvGamma1pm1Precondition1" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1Test#testInvGamma1pm1Precondition2" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1Test" : [ "testInvGamma1pm1Precondition2" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximation" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximation#<init>" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximation#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : [ "testGamma", "testGammaNegativeDouble" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGamma" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma#<init>" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGamma", "testLogGammaNan", "testLogGammaNegative", "testLogGammaPositive", "testLogGammaPrecondition1", "testLogGammaPrecondition2", "testLogGammaZero" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1p" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1p#<init>" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1p#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest" : [ "testLogGamma1p", "testLogGamma1pPrecondition1", "testLogGamma1pPrecondition2" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGamma", "testLogGammaPositive" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest" : [ "testLogGamma1p", "testLogGamma1pPrecondition1", "testLogGamma1pPrecondition2" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest#testLogGamma1p" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest" : [ "testLogGamma1p" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest#testLogGamma1pPrecondition1" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest" : [ "testLogGamma1pPrecondition1" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest#testLogGamma1pPrecondition2" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest" : [ "testLogGamma1pPrecondition2" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGamma", "testLogGammaNan", "testLogGammaNegative", "testLogGammaPositive", "testLogGammaPrecondition1", "testLogGammaPrecondition2", "testLogGammaZero" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest#testLogGamma" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGamma", "testLogGammaNan", "testLogGammaNegative", "testLogGammaPositive", "testLogGammaZero" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest#testLogGammaNan" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGammaNan" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest#testLogGammaNegative" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGammaNegative" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest#testLogGammaPositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGammaPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest#testLogGammaPrecondition1" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGammaPrecondition1" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest#testLogGammaPrecondition2" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGammaPrecondition2" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest#testLogGammaZero" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGammaZero" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma#access$000" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma$P#<init>" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive", "testRegularizedGammaNegativePositive", "testRegularizedGammaPositiveNan", "testRegularizedGammaPositiveNegative", "testRegularizedGammaPositivePositive", "testRegularizedGammaPositiveZero", "testRegularizedGammaZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma$P#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive", "testRegularizedGammaNegativePositive", "testRegularizedGammaPositiveNan", "testRegularizedGammaPositiveNegative", "testRegularizedGammaPositivePositive", "testRegularizedGammaPositiveZero", "testRegularizedGammaZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma$Q#<init>" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive", "testRegularizedGammaNegativePositive", "testRegularizedGammaPositiveNan", "testRegularizedGammaPositiveNegative", "testRegularizedGammaPositivePositive", "testRegularizedGammaPositiveZero", "testRegularizedGammaZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma$Q#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive", "testRegularizedGammaNegativePositive", "testRegularizedGammaPositiveNan", "testRegularizedGammaPositiveNegative", "testRegularizedGammaPositivePositive", "testRegularizedGammaPositiveZero", "testRegularizedGammaZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive", "testRegularizedGammaNegativePositive", "testRegularizedGammaPositiveNan", "testRegularizedGammaPositiveNegative", "testRegularizedGammaPositivePositive", "testRegularizedGammaPositiveZero", "testRegularizedGammaZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest#testRegularizedGamma" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive", "testRegularizedGammaNegativePositive", "testRegularizedGammaPositiveNan", "testRegularizedGammaPositiveNegative", "testRegularizedGammaPositivePositive", "testRegularizedGammaPositiveZero", "testRegularizedGammaZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest#testRegularizedGammaNanPositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest#testRegularizedGammaNegativePositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNegativePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest#testRegularizedGammaPositiveNan" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositiveNan" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest#testRegularizedGammaPositiveNegative" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositiveNegative" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest#testRegularizedGammaPositivePositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest#testRegularizedGammaPositiveZero" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositiveZero" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest#testRegularizedGammaZeroPositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Trigamma" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Trigamma#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.TrigammaTest" : [ "testTrigamma", "testTrigammaNonRealArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.TrigammaTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.TrigammaTest" : [ "testTrigamma", "testTrigammaNonRealArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.TrigammaTest#testTrigamma" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.TrigammaTest" : [ "testTrigamma" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.TrigammaTest#testTrigammaNonRealArgs" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.TrigammaTest" : [ "testTrigammaNonRealArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.package-info" : {
          "testcases" : { }
        }
      }
    },
    "f7e9300a0747d6ef3896a55179801bec27b1cfec" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "f7e9300a0747d6ef3896a55179801bec27b1cfec~1",
      "changedClazzes" : {
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest#testRegularizedGamma(double,double,double)" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive", "testRegularizedGammaNegativePositive", "testRegularizedGammaPositiveNan", "testRegularizedGammaPositiveNegative", "testRegularizedGammaPositivePositive", "testRegularizedGammaPositiveZero", "testRegularizedGammaZeroPositive" ]
          }
        }
      }
    },
    "871bb759cf15d887f11a5a7e7428bfba1cc4cafd" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "871bb759cf15d887f11a5a7e7428bfba1cc4cafd~1",
      "changedClazzes" : {
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest#testLogGamma(double,double)" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGamma", "testLogGammaNan", "testLogGammaNegative", "testLogGammaPositive", "testLogGammaZero" ]
          }
        }
      }
    },
    "f271063539ca219a94b37e60cdc0022ea65563e5" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "f271063539ca219a94b37e60cdc0022ea65563e5~1",
      "changedClazzes" : {
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Digamma" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest" : [ "testDigammaLargeArgs", "testDigammaNonRealArgs", "testDigammaSmallArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest" : [ "testDigammaLargeArgs", "testDigammaNonRealArgs", "testDigammaSmallArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Trigamma" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.TrigammaTest" : [ "testTrigamma", "testTrigammaNonRealArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.TrigammaTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.TrigammaTest" : [ "testTrigamma", "testTrigammaNonRealArgs" ]
          }
        }
      }
    },
    "14f6f851b179249cb74b6dfa5b3c8d193e607186" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "14f6f851b179249cb74b6dfa5b3c8d193e607186~1",
      "changedClazzes" : {
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Digamma" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest" : [ "testDigammaLargeArgs", "testDigammaNonRealArgs", "testDigammaSmallArgs" ]
          }
        }
      }
    },
    "5944675f3f3e00b462ee9b44c6f986a3cb65229b" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "5944675f3f3e00b462ee9b44c6f986a3cb65229b~1",
      "changedClazzes" : {
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Gamma#value(double)" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : [ "testGamma", "testGammaNegativeDouble", "testGammaNegativeInteger" ]
          }
        }
      }
    },
    "cad5798e0539f90155cca086b3cf6c8098f80fd8" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "cad5798e0539f90155cca086b3cf6c8098f80fd8~1",
      "changedClazzes" : {
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma$P#value(double,double,double,int)" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive", "testRegularizedGammaNegativePositive", "testRegularizedGammaPositiveNan", "testRegularizedGammaPositiveNegative", "testRegularizedGammaPositivePositive", "testRegularizedGammaPositiveZero", "testRegularizedGammaZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma$Q#value(double,double,double,int)" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive", "testRegularizedGammaNegativePositive", "testRegularizedGammaPositiveNan", "testRegularizedGammaPositiveNegative", "testRegularizedGammaPositivePositive", "testRegularizedGammaPositiveZero", "testRegularizedGammaZeroPositive" ]
          }
        }
      }
    },
    "ef4ab32365ea7f5a0debb9f48734839b5ed00a86" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "ef4ab32365ea7f5a0debb9f48734839b5ed00a86~1",
      "changedClazzes" : {
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Digamma" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest" : [ "testDigammaLargeArgs", "testDigammaNonRealArgs", "testDigammaSmallArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.DigammaTest" : [ "testDigammaLargeArgs", "testDigammaNonRealArgs", "testDigammaSmallArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Gamma" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : [ "testGamma", "testGammaNegativeDouble", "testGammaNegativeInteger" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : [ "testGamma", "testGammaNegativeDouble", "testGammaNegativeInteger" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : [ "testGamma", "testGammaNegativeDouble" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1Test" : [ "testInvGamma1pm1", "testInvGamma1pm1Precondition1", "testInvGamma1pm1Precondition2" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest" : [ "testLogGamma1p" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGamma", "testLogGammaPositive" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1Test" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1Test" : [ "testInvGamma1pm1", "testInvGamma1pm1Precondition1", "testInvGamma1pm1Precondition2" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximation" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : [ "testGamma", "testGammaNegativeDouble" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGamma" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGamma", "testLogGammaNan", "testLogGammaNegative", "testLogGammaPositive", "testLogGammaPrecondition1", "testLogGammaPrecondition2", "testLogGammaZero" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1p" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest" : [ "testLogGamma1p", "testLogGamma1pPrecondition1", "testLogGamma1pPrecondition2" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGamma", "testLogGammaPositive" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1pTest" : [ "testLogGamma1p", "testLogGamma1pPrecondition1", "testLogGamma1pPrecondition2" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGamma", "testLogGammaNan", "testLogGammaNegative", "testLogGammaPositive", "testLogGammaPrecondition1", "testLogGammaPrecondition2", "testLogGammaZero" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma$P" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive", "testRegularizedGammaNegativePositive", "testRegularizedGammaPositiveNan", "testRegularizedGammaPositiveNegative", "testRegularizedGammaPositivePositive", "testRegularizedGammaPositiveZero", "testRegularizedGammaZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma$Q" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive", "testRegularizedGammaNegativePositive", "testRegularizedGammaPositiveNan", "testRegularizedGammaPositiveNegative", "testRegularizedGammaPositivePositive", "testRegularizedGammaPositiveZero", "testRegularizedGammaZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest#testRegularizedGamma(double,double,double)" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive", "testRegularizedGammaNegativePositive", "testRegularizedGammaPositiveNan", "testRegularizedGammaPositiveNegative", "testRegularizedGammaPositivePositive", "testRegularizedGammaPositiveZero", "testRegularizedGammaZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Trigamma" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.TrigammaTest" : [ "testTrigamma", "testTrigammaNonRealArgs" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.TrigammaTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.TrigammaTest" : [ "testTrigamma", "testTrigammaNonRealArgs" ]
          }
        }
      }
    },
    "1aa1ddcd5a3bfdb99ae38bc5c761a80adb166ad6" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "1aa1ddcd5a3bfdb99ae38bc5c761a80adb166ad6~1",
      "changedClazzes" : {
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle" : {
          "testcases" : { }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#<init>" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionDegrees", "testConversionRadians", "testConversionTurns", "testEquals1", "testEquals2", "testEquals3", "testHashCode", "testNormalizeSimple1", "testNormalizeSimple2", "testNormalizeSimple3", "testNormalizeSimple4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#equals" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testEquals1", "testEquals2", "testEquals3" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#hashCode" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testHashCode" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#normalize" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeSimple1", "testNormalizeSimple2", "testNormalizeSimple3", "testNormalizeSimple4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#ofDegrees" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionDegrees" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#ofRadians" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionRadians", "testEquals1", "testEquals2", "testEquals3", "testNormalizeSimple4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#ofTurns" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionTurns", "testHashCode", "testNormalizeSimple1", "testNormalizeSimple2", "testNormalizeSimple3" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#toDegrees" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionDegrees" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#toRadians" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionRadians", "testNormalizeSimple4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#toTurns" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionTurns", "testNormalizeSimple1", "testNormalizeSimple2", "testNormalizeSimple3" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionDegrees", "testConversionRadians", "testConversionTurns", "testEquals1", "testEquals2", "testEquals3", "testHashCode", "testNormalizeSimple1", "testNormalizeSimple2", "testNormalizeSimple3", "testNormalizeSimple4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testConversionDegrees" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionDegrees" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testConversionRadians" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionRadians" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testConversionTurns" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionTurns" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testEquals1" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testEquals1" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testEquals2" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testEquals2" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testEquals3" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testEquals3" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testHashCode" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testHashCode" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testNormalizeSimple1" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeSimple1" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testNormalizeSimple2" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeSimple2" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testNormalizeSimple3" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeSimple3" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testNormalizeSimple4" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeSimple4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.package-info" : {
          "testcases" : { }
        }
      }
    },
    "d79edb264f71db3e88779efe2681fa8c48310c3c" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "d79edb264f71db3e88779efe2681fa8c48310c3c~1",
      "changedClazzes" : {
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Gamma" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : [ "testGamma", "testGammaNegativeDouble", "testGammaNegativeInteger" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximation" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaTest" : [ "testGamma", "testGammaNegativeDouble" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaTest" : [ "testLogGamma" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximation#g" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximationTest" : [ "testG" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximationTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximationTest" : [ "testG" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximationTest#testG" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximationTest" : [ "testG" ]
          }
        }
      }
    },
    "8555a73a5626720107ce2bc78032fc4de0260953" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "8555a73a5626720107ce2bc78032fc4de0260953~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#equals" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testMath1067", "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaTinyArgument", "testRegularizedBetaZeroPositivePositive" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFraction#<init>" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testMath1067", "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaTinyArgument", "testRegularizedBetaZeroPositivePositive" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFraction#evaluate" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testMath1067", "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaTinyArgument", "testRegularizedBetaZeroPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Gamma#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBeta" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.GammaException#<init>" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogGammaMinusLogGammaSumPrecondition1", "testLogGammaMinusLogGammaSumPrecondition2", "testSumDeltaMinusDeltaSumPrecondition1", "testSumDeltaMinusDeltaSumPrecondition2" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest" : [ "testLogGammaSumPrecondition1", "testLogGammaSumPrecondition2", "testLogGammaSumPrecondition3", "testLogGammaSumPrecondition4" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBeta", "testLogBetaPositivePositive" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest" : [ "testLogGammaSum" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaTinyArgument", "testRegularizedBetaZeroPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBeta" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBeta#deltaMinusDeltaSum" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBeta", "testLogGammaMinusLogGammaSum", "testSumDeltaMinusDeltaSum" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testMath1067", "testRegularizedBetaTinyArgument" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBeta#logGammaMinusLogGammaSum" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBeta", "testLogGammaMinusLogGammaSum", "testLogGammaMinusLogGammaSumPrecondition1", "testLogGammaMinusLogGammaSumPrecondition2" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaTinyArgument" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBeta#sumDeltaMinusDeltaSum" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBeta", "testSumDeltaMinusDeltaSum", "testSumDeltaMinusDeltaSumPrecondition1", "testSumDeltaMinusDeltaSumPrecondition2" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testMath1067" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBeta#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBeta", "testLogBetaNanPositive", "testLogBetaNegativePositive", "testLogBetaPositiveNan", "testLogBetaPositiveNegative", "testLogBetaPositivePositive", "testLogBetaPositiveZero", "testLogBetaZeroPositive" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testMath1067", "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaTinyArgument", "testRegularizedBetaZeroPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBeta", "testLogBetaNanPositive", "testLogBetaNegativePositive", "testLogBetaPositiveNan", "testLogBetaPositiveNegative", "testLogBetaPositivePositive", "testLogBetaPositiveZero", "testLogBetaZeroPositive", "testLogGammaMinusLogGammaSum", "testLogGammaMinusLogGammaSumPrecondition1", "testLogGammaMinusLogGammaSumPrecondition2", "testSumDeltaMinusDeltaSum", "testSumDeltaMinusDeltaSumPrecondition1", "testSumDeltaMinusDeltaSumPrecondition2" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#logGammaMinusLogGammaSum" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogGammaMinusLogGammaSum", "testLogGammaMinusLogGammaSumPrecondition1", "testLogGammaMinusLogGammaSumPrecondition2" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#sumDeltaMinusDeltaSum" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testSumDeltaMinusDeltaSum", "testSumDeltaMinusDeltaSumPrecondition1", "testSumDeltaMinusDeltaSumPrecondition2" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#testLogBeta" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBeta", "testLogBetaNanPositive", "testLogBetaNegativePositive", "testLogBetaPositiveNan", "testLogBetaPositiveNegative", "testLogBetaPositivePositive", "testLogBetaPositiveZero", "testLogBetaZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#testLogBetaNanPositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBetaNanPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#testLogBetaNegativePositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBetaNegativePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#testLogBetaPositiveNan" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBetaPositiveNan" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#testLogBetaPositiveNegative" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBetaPositiveNegative" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#testLogBetaPositivePositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBetaPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#testLogBetaPositiveZero" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBetaPositiveZero" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#testLogBetaZeroPositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBetaZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#testLogGammaMinusLogGammaSum" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogGammaMinusLogGammaSum" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#testLogGammaMinusLogGammaSumPrecondition1" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogGammaMinusLogGammaSumPrecondition1" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#testLogGammaMinusLogGammaSumPrecondition2" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogGammaMinusLogGammaSumPrecondition2" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#testSumDeltaMinusDeltaSum" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testSumDeltaMinusDeltaSum" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#testSumDeltaMinusDeltaSumPrecondition1" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testSumDeltaMinusDeltaSumPrecondition1" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest#testSumDeltaMinusDeltaSumPrecondition2" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testSumDeltaMinusDeltaSumPrecondition2" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBeta", "testLogBetaPositivePositive" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaTinyArgument", "testRegularizedBetaZeroPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1p#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBeta", "testLogBetaPositivePositive" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest" : [ "testLogGammaSum" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaTinyArgument", "testRegularizedBetaZeroPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSum" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSum#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogBetaTest" : [ "testLogBeta", "testLogBetaPositivePositive" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest" : [ "testLogGammaSum", "testLogGammaSumPrecondition1", "testLogGammaSumPrecondition2", "testLogGammaSumPrecondition3", "testLogGammaSumPrecondition4" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaZeroPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest" : [ "testLogGammaSum", "testLogGammaSumPrecondition1", "testLogGammaSumPrecondition2", "testLogGammaSumPrecondition3", "testLogGammaSumPrecondition4" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest#testLogGammaSum" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest" : [ "testLogGammaSum" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest#testLogGammaSumPrecondition1" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest" : [ "testLogGammaSumPrecondition1" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest#testLogGammaSumPrecondition2" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest" : [ "testLogGammaSumPrecondition2" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest#testLogGammaSumPrecondition3" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest" : [ "testLogGammaSumPrecondition3" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest#testLogGammaSumPrecondition4" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGammaSumTest" : [ "testLogGammaSumPrecondition4" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBeta" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBeta#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testMath1067", "testRegularizedBetaNanPositivePositive", "testRegularizedBetaNegativePositivePositive", "testRegularizedBetaPositiveNanPositive", "testRegularizedBetaPositiveNegativePositive", "testRegularizedBetaPositivePositiveNan", "testRegularizedBetaPositivePositiveNegative", "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaPositivePositiveZero", "testRegularizedBetaPositiveZeroPositive", "testRegularizedBetaTinyArgument", "testRegularizedBetaZeroPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testMath1067", "testRegularizedBetaNanPositivePositive", "testRegularizedBetaNegativePositivePositive", "testRegularizedBetaPositiveNanPositive", "testRegularizedBetaPositiveNegativePositive", "testRegularizedBetaPositivePositiveNan", "testRegularizedBetaPositivePositiveNegative", "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaPositivePositiveZero", "testRegularizedBetaPositiveZeroPositive", "testRegularizedBetaTinyArgument", "testRegularizedBetaZeroPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest#testMath1067" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testMath1067" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest#testRegularizedBeta" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaNanPositivePositive", "testRegularizedBetaNegativePositivePositive", "testRegularizedBetaPositiveNanPositive", "testRegularizedBetaPositiveNegativePositive", "testRegularizedBetaPositivePositiveNan", "testRegularizedBetaPositivePositiveNegative", "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaPositivePositiveZero", "testRegularizedBetaPositiveZeroPositive", "testRegularizedBetaZeroPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest#testRegularizedBetaNanPositivePositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaNanPositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest#testRegularizedBetaNegativePositivePositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaNegativePositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest#testRegularizedBetaPositiveNanPositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaPositiveNanPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest#testRegularizedBetaPositiveNegativePositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaPositiveNegativePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest#testRegularizedBetaPositivePositiveNan" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaPositivePositiveNan" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest#testRegularizedBetaPositivePositiveNegative" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaPositivePositiveNegative" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest#testRegularizedBetaPositivePositivePositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaPositivePositivePositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest#testRegularizedBetaPositivePositiveZero" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaPositivePositiveZero" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest#testRegularizedBetaPositiveZeroPositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaPositiveZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest#testRegularizedBetaTinyArgument" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaTinyArgument" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest#testRegularizedBetaZeroPositivePositive" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testRegularizedBetaZeroPositivePositive" ]
          }
        }
      }
    },
    "4de442f68f7debc828e202e3b89e2e4d0de1e4d8" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "4de442f68f7debc828e202e3b89e2e4d0de1e4d8~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#equals" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFraction#<init>" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFraction#evaluate" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Erf" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Erf#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf0", "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifference" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifference#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest#testTwoArgumentErf" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf0", "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest#testErf0" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf0" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest#testErf1960" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf1960" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest#testErf2576" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf2576" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest#testErf2807" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf2807" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest#testErf3291" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf3291" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest#testErfGnu" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErfGnu" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest#testLargeValues" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testLargeValues" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Erfc" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.Erfc#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf0", "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest#testErfcGnu" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest#testErfcMaple" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcMaple" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InvGamma1pm1#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErf" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErf#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfTest" : [ "testErfInvInfinite", "testErfInvNaN" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfcTest" : [ "testErfcInvInfinite", "testErfcInvNaN" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfTest" : [ "testErfInvInfinite", "testErfInvNaN" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfTest#testErfInvInfinite" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfTest" : [ "testErfInvInfinite" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfTest#testErfInvNaN" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfTest" : [ "testErfInvNaN" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfc" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfc#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfcTest" : [ "testErfcInvInfinite", "testErfcInvNaN" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfcTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfcTest" : [ "testErfcInvInfinite", "testErfcInvNaN" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfcTest#testErfcInvInfinite" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfcTest" : [ "testErfcInvInfinite" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfcTest#testErfcInvNaN" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.InverseErfcTest" : [ "testErfcInvNaN" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LogGamma1p#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma$P#<init>" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma$P#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf0", "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma$Q#<init>" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma$Q#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf0", "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ]
          }
        }
      }
    },
    "7a8965240785a49a5c78c238f63582c364a98160" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "9f1d9ef6f79adcbf56d8b71663edbf525a4d5be9" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "d195a7bbbfe3d0bdcb4b7d2a36aa5a120fd496e8" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "e4c21beac3f404e81e2fa369cbe225f06dc3e347" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "7a08b2a43ad6ba6ee7ebb4c649088dd7c5dbb540",
      "changedClazzes" : {
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngle" : {
          "testcases" : { }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngle#value" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngleTest" : [ "testCosAngle2D", "testCosAngle3D", "testCosAngleExtreme" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngleTest" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngleTest" : [ "testCosAngle2D", "testCosAngle3D", "testCosAngleExtreme" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngleTest#testCosAngle2D" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngleTest" : [ "testCosAngle2D" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngleTest#testCosAngle3D" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngleTest" : [ "testCosAngle3D" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngleTest#testCosAngleExtreme" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngleTest" : [ "testCosAngleExtreme" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombination" : {
          "testcases" : { }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombination#highPart" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngleTest" : [ "testCosAngle2D", "testCosAngle3D", "testCosAngleExtreme" ],
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testHuge", "testInfinite", "testTwoSums" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombination#prodLow" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngleTest" : [ "testCosAngle2D", "testCosAngle3D", "testCosAngleExtreme" ],
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testHuge", "testInfinite", "testTwoSums" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombination#value" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngleTest" : [ "testCosAngle2D", "testCosAngle3D", "testCosAngleExtreme" ],
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testHuge", "testInfinite", "testSingleElementArray", "testTwoSums" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testHuge", "testInfinite", "testSingleElementArray", "testTwoSums" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest#testHuge" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testHuge" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest#testInfinite" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testInfinite" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest#testSingleElementArray" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testSingleElementArray" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest#testTwoSums" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testTwoSums" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNorm" : {
          "testcases" : { }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNorm#value" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.CosAngleTest" : [ "testCosAngle2D", "testCosAngle3D", "testCosAngleExtreme" ],
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNormTest" : [ "testBig", "testOne3D", "testSimple", "testTiny", "testUnit3D" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNormTest" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNormTest" : [ "testBig", "testOne3D", "testSimple", "testTiny", "testUnit3D" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNormTest#testBig" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNormTest" : [ "testBig" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNormTest#testOne3D" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNormTest" : [ "testOne3D" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNormTest#testSimple" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNormTest" : [ "testSimple" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNormTest#testTiny" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNormTest" : [ "testTiny" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNormTest#testUnit3D" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.SafeNormTest" : [ "testUnit3D" ]
          }
        },
        "commons-numbers-arrays§org.apache.commons.numbers.arrays.package-info" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#<init>" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testTwoSums" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#add" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testTwoSums" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#checkNotNull" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testTwoSums" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#doubleValue" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testTwoSums" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#getDenominator" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testTwoSums" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#getNumerator" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testTwoSums" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction#multiply" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testTwoSums" ]
          }
        }
      }
    },
    "6fd55c8cc6394c1ba77e81cab3dd60c29a14f581" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "6fd55c8cc6394c1ba77e81cab3dd60c29a14f581~1",
      "changedClazzes" : {
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionDegrees", "testConversionRadians", "testConversionTurns", "testEquals1", "testEquals2", "testEquals3", "testHashCode", "testNormalizeSimple1", "testNormalizeSimple2", "testNormalizeSimple3", "testNormalizeSimple4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#<init>" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testPi", "testZero" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#toRadians" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testPi", "testZero" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionDegrees", "testConversionRadians", "testConversionTurns", "testEquals1", "testEquals2", "testEquals3", "testHashCode", "testNormalizeSimple1", "testNormalizeSimple2", "testNormalizeSimple3", "testNormalizeSimple4", "testPi", "testZero" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testPi" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testPi" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testZero" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testZero" ]
          }
        }
      }
    },
    "04e92c6ebf0eac14514b381e750beaaf9257eac1" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "04e92c6ebf0eac14514b381e750beaaf9257eac1~1",
      "changedClazzes" : {
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadians" : {
          "testcases" : { }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : {
          "testcases" : { }
        }
      }
    },
    "dba917c96871c67e3b546df95bc6addd63cd19da" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "dba917c96871c67e3b546df95bc6addd63cd19da~1",
      "changedClazzes" : {
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionDegrees", "testConversionRadians", "testConversionTurns", "testEquals1", "testEquals2", "testEquals3", "testHashCode", "testPi", "testZero" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#<init>" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeAroundZero1", "testNormalizeAroundZero2", "testNormalizeAroundZero3", "testNormalizeAroundZero4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#normalize" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeAroundZero1", "testNormalizeAroundZero2", "testNormalizeAroundZero3", "testNormalizeAroundZero4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#ofRadians" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeAroundZero4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#ofTurns" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeAroundZero1", "testNormalizeAroundZero2", "testNormalizeAroundZero3" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#toRadians" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeAroundZero4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#toTurns" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeAroundZero1", "testNormalizeAroundZero2", "testNormalizeAroundZero3" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeAroundZero1", "testNormalizeAroundZero2", "testNormalizeAroundZero3", "testNormalizeAroundZero4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testNormalizeAroundZero1" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeAroundZero1" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testNormalizeAroundZero2" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeAroundZero2" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testNormalizeAroundZero3" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeAroundZero3" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testNormalizeAroundZero4" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeAroundZero4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testNormalizeSimple1" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testNormalizeSimple2" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testNormalizeSimple3" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testNormalizeSimple4" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ ]
          }
        }
      }
    },
    "c8e0a34f7be9fcef0c1c23ff58a548c12e800db0" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "c8e0a34f7be9fcef0c1c23ff58a548c12e800db0~1",
      "changedClazzes" : {
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#<init>" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi1", "testNormalizeBetweenMinusPiAndPi2", "testNormalizeBetweenMinusPiAndPi3", "testNormalizeBetweenMinusPiAndPi4", "testNormalizeBetweenZeroAndTwoPi1", "testNormalizeBetweenZeroAndTwoPi2", "testNormalizeBetweenZeroAndTwoPi3", "testNormalizeBetweenZeroAndTwoPi4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#normalize" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi1", "testNormalizeBetweenMinusPiAndPi2", "testNormalizeBetweenMinusPiAndPi3", "testNormalizeBetweenMinusPiAndPi4", "testNormalizeBetweenZeroAndTwoPi1", "testNormalizeBetweenZeroAndTwoPi2", "testNormalizeBetweenZeroAndTwoPi3", "testNormalizeBetweenZeroAndTwoPi4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#ofRadians" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi1", "testNormalizeBetweenMinusPiAndPi2", "testNormalizeBetweenMinusPiAndPi3", "testNormalizeBetweenMinusPiAndPi4", "testNormalizeBetweenZeroAndTwoPi1", "testNormalizeBetweenZeroAndTwoPi2", "testNormalizeBetweenZeroAndTwoPi3", "testNormalizeBetweenZeroAndTwoPi4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#toRadians" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi1", "testNormalizeBetweenMinusPiAndPi2", "testNormalizeBetweenMinusPiAndPi3", "testNormalizeBetweenMinusPiAndPi4", "testNormalizeBetweenZeroAndTwoPi1", "testNormalizeBetweenZeroAndTwoPi2", "testNormalizeBetweenZeroAndTwoPi3", "testNormalizeBetweenZeroAndTwoPi4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadians" : {
          "testcases" : { }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadians#normalizeBetweenMinusPiAndPi" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi1", "testNormalizeBetweenMinusPiAndPi2", "testNormalizeBetweenMinusPiAndPi3", "testNormalizeBetweenMinusPiAndPi4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadians#normalizeBetweenZeroAndTwoPi" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenZeroAndTwoPi1", "testNormalizeBetweenZeroAndTwoPi2", "testNormalizeBetweenZeroAndTwoPi3", "testNormalizeBetweenZeroAndTwoPi4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi1", "testNormalizeBetweenMinusPiAndPi2", "testNormalizeBetweenMinusPiAndPi3", "testNormalizeBetweenMinusPiAndPi4", "testNormalizeBetweenZeroAndTwoPi1", "testNormalizeBetweenZeroAndTwoPi2", "testNormalizeBetweenZeroAndTwoPi3", "testNormalizeBetweenZeroAndTwoPi4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest#testNormalizeBetweenMinusPiAndPi1" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi1" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest#testNormalizeBetweenMinusPiAndPi2" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi2" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest#testNormalizeBetweenMinusPiAndPi3" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi3" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest#testNormalizeBetweenMinusPiAndPi4" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi4" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest#testNormalizeBetweenZeroAndTwoPi1" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenZeroAndTwoPi1" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest#testNormalizeBetweenZeroAndTwoPi2" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenZeroAndTwoPi2" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest#testNormalizeBetweenZeroAndTwoPi3" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenZeroAndTwoPi3" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest#testNormalizeBetweenZeroAndTwoPi4" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenZeroAndTwoPi4" ]
          }
        }
      }
    },
    "40fd2b4eb86b2f29e8141e08bd4f6338c79a4743" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "40fd2b4eb86b2f29e8141e08bd4f6338c79a4743~1",
      "changedClazzes" : {
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testConversionDegrees" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionDegrees" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testConversionRadians" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionRadians" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testConversionTurns" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionTurns" ]
          }
        }
      }
    },
    "6b523a37f1984c0fd7cdc7946b41fce52c0be8cc" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "6b523a37f1984c0fd7cdc7946b41fce52c0be8cc~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2Interleaved(Complex[][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2Interleaved(Complex[][][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2InterleavedFloat(Complex[][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2InterleavedFloat(Complex[][][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(double[][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(double[][][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(float[][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(float[][][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        }
      }
    },
    "28d6b98f08c89bef488cae2f0d058293151e70ba" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "45a7579e92befffaf70e2ae24a4036458da071bc" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "6b523a37f1984c0fd7cdc7946b41fce52c0be8cc",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#assertComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testSqrt1" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAcos", "testAcosInf", "testAdd", "testAddInf", "testAsin", "testAsinInf", "testAtan", "testConjugate", "testConstructor", "testCos", "testCosInf", "testCosh", "testCoshInf", "testDivide", "testDivideImaginary", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogZero", "testMath221", "testMultiply", "testNegate", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSin", "testSinInf", "testSinh", "testSinhInf", "testSqrt1z", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testTan", "testTanCritical", "testTanh", "testTanhCritical" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt1" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt1" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt1" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAcos", "testAcosInf", "testAdd", "testAddInf", "testAsin", "testAsinInf", "testAtan", "testConjugate", "testConjugateInfinite", "testConstructor", "testCos", "testCosInf", "testCosh", "testCoshInf", "testDivide", "testDivideImaginary", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogZero", "testMath221", "testMultiply", "testNegate", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSin", "testSinInf", "testSinh", "testSinhInf", "testSqrt1z", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testTan", "testTanCritical", "testTanh", "testTanhCritical" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testConjugateInfinite" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtPolar" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        }
      }
    },
    "47e19ab375e512518fa25bb446e16fd5c64ac0a2" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "47e19ab375e512518fa25bb446e16fd5c64ac0a2~1",
      "changedClazzes" : {
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest#getA(int,double)" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest#getB(int,double)" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest#testGoldenRatio" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testGoldenRatio" ]
          }
        }
      }
    },
    "bc83d14fe2b7b4e86f6b01d37ce6b92bbf468916" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "bc83d14fe2b7b4e86f6b01d37ce6b92bbf468916~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#equals" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testOneIteration", "testTwoIterations" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFraction#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testOneIteration", "testTwoIterations" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFraction#evaluate" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testOneIteration", "testTwoIterations" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFraction#evaluate(double,double,int)" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testGoldenRatio" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testMath1067", "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaTinyArgument", "testRegularizedBetaZeroPositivePositive" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testGoldenRatio", "testOneIteration", "testTwoIterations" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest#testOneIteration" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testOneIteration" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest#testTwoIterations" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testTwoIterations" ]
          }
        }
      }
    },
    "f1a8f907145d343c2ea161d76c32b05740c43742" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "f1a8f907145d343c2ea161d76c32b05740c43742~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAcos", "testAcosInf", "testAdd", "testAddInf", "testAsin", "testAsinInf", "testAtan", "testConjugate", "testConstructor", "testCos", "testCosInf", "testCosh", "testCoshInf", "testDivide", "testDivideImaginary", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogZero", "testMath221", "testMultiply", "testNegate", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSin", "testSinInf", "testSinh", "testSinhInf", "testSqrt1z", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testTan", "testTanCritical", "testTanh", "testTanhCritical" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testConjugateInfinite" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateInfinite" ]
          }
        }
      }
    },
    "91090df9869177582c327c6c7159e981a90efd70" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "91090df9869177582c327c6c7159e981a90efd70~1",
      "changedClazzes" : {
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximation#value" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximationTest" : [ "testSomeValues" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximationTest" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximationTest" : [ "testG", "testSomeValues" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximationTest#testSomeValues" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.LanczosApproximationTest" : [ "testSomeValues" ]
          }
        }
      }
    },
    "a6c54559c8609614bf55740885d176ddd60b11f7" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "a6c54559c8609614bf55740885d176ddd60b11f7~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#assertComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testAcos" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testSqrt1" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAcos", "testAdd", "testAddInf", "testAsin", "testAsinInf", "testAtan", "testConjugate", "testConjugateInfinite", "testConstructor", "testCos", "testCosInf", "testCosh", "testCoshInf", "testDivide", "testDivideImaginary", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogZero", "testMath221", "testMultiply", "testNegate", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSin", "testSinInf", "testSinh", "testSinhInf", "testSqrt1z", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testTan", "testTanCritical", "testTanh", "testTanhCritical" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#acos" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#add" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#checkNotNull" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conj" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#log" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#multiply" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#negate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt1z" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#subtract" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        }
      }
    },
    "ade98aa183a88502c0dccd1350d47dc6c8d1f37a" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "ade98aa183a88502c0dccd1350d47dc6c8d1f37a~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#assertComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testAsinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#add" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#asinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#checkNotNull" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conj" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#log" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#multiply" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#square" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        }
      }
    },
    "48464a3cf57e8a62d97e8c8741cadad23406e4ea" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "48464a3cf57e8a62d97e8c8741cadad23406e4ea~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#assertComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testAtanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testSqrt1" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAcos", "testAdd", "testAddInf", "testAsin", "testAsinInf", "testAtan", "testConjugate", "testConjugateInfinite", "testConstructor", "testCos", "testCosInf", "testCosh", "testCoshInf", "testDivide", "testDivideImaginary", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testExp", "testExpInf1", "testExpInf2", "testExpInf3", "testExpInf4", "testExpInf5", "testExpInf6", "testExpInf7", "testExpInf8", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testLog", "testLogZero", "testMath221", "testMultiply", "testNegate", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testPow", "testPowInf", "testReciprocal", "testReciprocalImaginary", "testReciprocalInf", "testReciprocalReal", "testReciprocalReciprocal", "testReciprocalZero", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSin", "testSinInf", "testSinh", "testSinhInf", "testSqrt1z", "testSqrtImaginaryNegative", "testSqrtImaginaryZero", "testSqrtPolar", "testSqrtRealNegative", "testSqrtRealPositive", "testSqrtRealZero", "testSubtract", "testSubtractInf", "testTan", "testTanCritical", "testTanh", "testTanhCritical" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#add" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#atanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#checkNotNull" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conj" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#divide" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#log" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#neitherInfiniteNorZeroNorNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#subtract" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        }
      }
    },
    "1de701b3e3c9dce998a1a0a7ed747ee5aa76cef4" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "1de701b3e3c9dce998a1a0a7ed747ee5aa76cef4~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        }
      }
    },
    "c8db04d0ac1001774b97fb7abe3f198a30500335" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "c8db04d0ac1001774b97fb7abe3f198a30500335~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#assertComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testAcos" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testAsinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testAtanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testCosh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testCosh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testSqrt1" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#acos" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#add" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#asinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#atanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#checkNotNull" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conj" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#cosh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testCosh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#divide" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#log" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#multiply" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#negate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#neitherInfiniteNorZeroNorNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt1z" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#square" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#subtract" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAtanh" ]
          }
        }
      }
    },
    "6bf4d8b74d2b56d506bc5049dbd64a44cad40c31" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "6bf4d8b74d2b56d506bc5049dbd64a44cad40c31~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testExp" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#assertComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testExp" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testExp" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testExp" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testExp" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#add(Complex)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#add(double)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conj" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testExp" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#cos" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#cosh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testCosh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#divide(Complex)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#divide(double)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#exp" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testExp" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testExp" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testExp" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#log" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#log10" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#multiply(Complex)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#multiply(double)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#multiply(int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#negate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#readResolve" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#reciprocal" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sin" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sinh" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt1z" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#subtract(Complex)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#subtract(double)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#tan" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#tanh" : {
          "testcases" : { }
        }
      }
    },
    "ed75255890e78d9b7ee261f7daad9b3436c74e8e" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "ed75255890e78d9b7ee261f7daad9b3436c74e8e~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testLog" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#assertComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testLog" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testLog" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testLog" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testLog" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testLog" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conj" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testLog" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testLog" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testLog" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testLog" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#log" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testLog" ]
          }
        }
      }
    },
    "1087aa983a4f951decedd90bbe06cd6ec9e4bc9b" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "1087aa983a4f951decedd90bbe06cd6ec9e4bc9b~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testLog", "testSqrt1" ]
          }
        }
      }
    },
    "af5fc05bb2b63e43c66f50eca0707865b9011ca5" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "af5fc05bb2b63e43c66f50eca0707865b9011ca5~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#assertComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig", "testSinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testImplicitTrig" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testSinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig", "testSinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#add" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#asin" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#asinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#atan" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#atanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#checkNotNull" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conj" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#cos" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#cosh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#divide" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig", "testSinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig", "testSinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#log" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#multiply" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#negate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#neitherInfiniteNorZeroNorNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sin" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig", "testSinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt1z" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#square" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#subtract" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        }
      }
    },
    "a9437c90666ca8c3045f1d59de1b77e536addba6" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "a9437c90666ca8c3045f1d59de1b77e536addba6~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt2", "testTanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#assertComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt2", "testTanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testImplicitTrig" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testSqrt2" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testTanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testTanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt2", "testTanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#acos" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#asinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#atanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conj" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt2", "testTanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#conjugate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt2", "testTanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#cosh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testCosh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#exp" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testExp" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt2", "testTanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt2", "testTanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#neitherInfiniteNorZeroNorNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#pow(Complex)" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#pow(double)" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testSqrt1", "testSqrt2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#tanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testTanh" ]
          }
        }
      }
    },
    "387f4e09b58d6d374a557a02093df887a8e8ebf8" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "387f4e09b58d6d374a557a02093df887a8e8ebf8~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#assertComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testImplicitTrig" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#add" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#asin" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#asinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#atan" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#atanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#checkNotNull" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#cos" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#cosh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#createComplex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#divide" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#log" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#multiply" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#negate" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#neitherInfiniteNorZeroNorNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sin" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt1z" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#square" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#subtract" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#tan" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#tanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        }
      }
    },
    "0a01e2d0e7e6c6621cbf6b5c2c7da885c1691c07" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "0a01e2d0e7e6c6621cbf6b5c2c7da885c1691c07~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        }
      }
    },
    "ec3bb9ed9c15dffb3eb7ebef7c53e005c366f0fa" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "ec3bb9ed9c15dffb3eb7ebef7c53e005c366f0fa~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#reciprocal" : {
          "testcases" : { }
        }
      }
    },
    "f0d1b9cdc279c5438a799d62b74effb7ece4958b" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "f0d1b9cdc279c5438a799d62b74effb7ece4958b~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#reciprocal" : {
          "testcases" : { }
        }
      }
    },
    "463f0179910b91216e28e04e0bbe279269209d86" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "dc430844316a5b49f63363efb4d774e31f4eb3dc" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "f0d1b9cdc279c5438a799d62b74effb7ece4958b",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "16322d83ab3092e93a1e2d7f576b185682c16f69" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "16322d83ab3092e93a1e2d7f576b185682c16f69~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testImplicitTrig", "testLog", "testSqrt1", "testSqrt2" ]
          }
        }
      }
    },
    "c098401cc0d8e2d8293d98a94efc46c2f374b623" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "c098401cc0d8e2d8293d98a94efc46c2f374b623~1",
      "changedClazzes" : {
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        }
      }
    },
    "b15facf8a0f3fbc8c8e661f1e22ba25a3834563c" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "b15facf8a0f3fbc8c8e661f1e22ba25a3834563c~1",
      "changedClazzes" : {
        "commons-numbers-field§org.apache.commons.numbers.field.FieldParametricTest" : {
          "testcases" : { }
        },
        "commons-numbers-field§org.apache.commons.numbers.field.FieldTestData" : {
          "testcases" : { }
        },
        "commons-numbers-field§org.apache.commons.numbers.field.FieldsList" : {
          "testcases" : { }
        }
      }
    },
    "fc70d935fdadc5d5a7862cf9a929da91b72b00d6" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "fc70d935fdadc5d5a7862cf9a929da91b72b00d6~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ]
          }
        }
      }
    },
    "4b955ca24a338ffa89bb49b3b0c8cabeb35fbea7" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "4b955ca24a338ffa89bb49b3b0c8cabeb35fbea7~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2Interleaved(Complex[][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2Interleaved(Complex[][][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2InterleavedFloat(Complex[][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2InterleavedFloat(Complex[][][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(double[][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(double[][][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(float[][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(float[][][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        }
      }
    },
    "bf05e066c816245609e0315b27103192906b2d17" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "bf05e066c816245609e0315b27103192906b2d17~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.Precision" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testReciprocalReal" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testCompareToEpsilon", "testCompareToMaxUlps", "testEqualsIncludingNaN", "testEqualsIncludingNaNWithAllowedDelta", "testEqualsIncludingNaNWithAllowedUlps", "testEqualsWithAllowedDelta", "testEqualsWithAllowedUlps", "testEqualsWithRelativeTolerance", "testFloatEqualsWithAllowedUlps", "testMath1127", "testMath475", "testRepresentableDelta", "testRoundDouble" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testGoldenRatio", "testOneIteration", "testTwoIterations" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testMath1067", "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaTinyArgument", "testRegularizedBetaZeroPositivePositive" ],
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnitQuaternion", "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testCompareToEpsilon", "testCompareToMaxUlps", "testEqualsIncludingNaN", "testEqualsIncludingNaNWithAllowedDelta", "testEqualsIncludingNaNWithAllowedUlps", "testEqualsWithAllowedDelta", "testEqualsWithAllowedUlps", "testEqualsWithRelativeTolerance", "testFloatEqualsWithAllowedUlps", "testIssue721", "testMath1127", "testMath475", "testMath843", "testRepresentableDelta", "testRoundDouble" ]
          }
        }
      }
    },
    "230b026267d745cbf9b09d0efef6af47b7da17d0" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "230b026267d745cbf9b09d0efef6af47b7da17d0~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#norm" : {
          "testcases" : { }
        }
      }
    },
    "45dee2ede42d17a36bb02e21b962f70eb92d1b88" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "45dee2ede42d17a36bb02e21b962f70eb92d1b88~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#norm" : {
          "testcases" : { }
        }
      }
    },
    "6caed745053368c11a4e2fccdf8108e7d7cc4a22" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "6caed745053368c11a4e2fccdf8108e7d7cc4a22~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#norm" : {
          "testcases" : { }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.Precision" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testReciprocalReal" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testCompareToEpsilon", "testCompareToMaxUlps", "testEqualsIncludingNaN", "testEqualsIncludingNaNWithAllowedDelta", "testEqualsIncludingNaNWithAllowedUlps", "testEqualsWithAllowedDelta", "testEqualsWithAllowedUlps", "testEqualsWithRelativeTolerance", "testFloatEqualsWithAllowedUlps", "testMath1127", "testMath475", "testRepresentableDelta", "testRoundDouble" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testGoldenRatio", "testOneIteration", "testTwoIterations" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testMath1067", "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaTinyArgument", "testRegularizedBetaZeroPositivePositive" ],
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnitQuaternion", "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testCompareToEpsilon", "testCompareToMaxUlps", "testEqualsIncludingNaN", "testEqualsIncludingNaNWithAllowedDelta", "testEqualsIncludingNaNWithAllowedUlps", "testEqualsWithAllowedDelta", "testEqualsWithAllowedUlps", "testEqualsWithRelativeTolerance", "testFloatEqualsWithAllowedUlps", "testIssue721", "testMath1127", "testMath475", "testMath843", "testRepresentableDelta", "testRoundDouble" ]
          }
        }
      }
    },
    "b2d226785278777545ed72b1c55146ea5de5b4b8" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "b2d226785278777545ed72b1c55146ea5de5b4b8~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#hashCode" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testHashCode" ]
          }
        }
      }
    },
    "2e07396d80cdd9ee2d7c824bbd5e6b321234cbfa" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "2e07396d80cdd9ee2d7c824bbd5e6b321234cbfa~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#neitherInfiniteNorZeroNorNaN(double)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testImplicitTrig", "testSqrt1", "testSqrt2" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar" ]
          }
        }
      }
    },
    "662d201b68ed5100abf2ee40359734194850562d" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "662d201b68ed5100abf2ee40359734194850562d~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "590010c7663c06e46c21865b803e34f844e468c5" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "590010c7663c06e46c21865b803e34f844e468c5~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2Interleaved(Complex[][][][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(double[][][][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        }
      }
    },
    "d011f8be2a166e49ebb496a254fff4d74060f818" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "d011f8be2a166e49ebb496a254fff4d74060f818~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils$NumbersArithmeticException" : {
          "testcases" : {
            "commons-numbers-combinatorics§org.apache.commons.numbers.combinatorics.BinomialCoefficientTest" : [ "testBinomialCoefficientFail3", "testBinomialCoefficientFail4", "testBinomialCoefficientFail5" ],
            "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtilsTest" : [ "testAddAndCheck", "testAddAndCheckLong", "testGcd", "testGcdLong", "testLcm", "testLcmLong", "testMulAndCheck", "testMulAndCheckLong", "testPowIntOverflow", "testPowLongOverflow", "testPowNegativeIntOverflow", "testPowNegativeLongOverflow", "testSubAndCheck", "testSubAndCheckErrorMessage", "testSubAndCheckLong" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAdd", "testDivide", "testSubtract" ]
          }
        }
      }
    },
    "e1ac4ed5fa59459869121d287d70b0f97a1e7ff6" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "e1ac4ed5fa59459869121d287d70b0f97a1e7ff6~1",
      "changedClazzes" : {
        "commons-numbers-field§org.apache.commons.numbers.field.FieldParametricTest" : {
          "testcases" : { }
        }
      }
    },
    "393cf6636de3bac72d09c60b900b2b124fa40e18" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "393cf6636de3bac72d09c60b900b2b124fa40e18~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#checkNotNegative(double)" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#checkNotNull(Object)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAdd", "testAddInf", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testMultiply", "testMultiplyInfInf", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#nthRoot(int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot" ]
          }
        }
      }
    },
    "21d5060f71811799cf5ef64cd872a4f1dee74997" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "21d5060f71811799cf5ef64cd872a4f1dee74997~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "2daea445e878c98fc0f0a5a90deb413813fdc8cf" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "2daea445e878c98fc0f0a5a90deb413813fdc8cf~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt1z" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrt1z", "testSqrt1zNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#tan" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#tanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig", "testTanh" ]
          }
        }
      }
    },
    "5dbfebebe6a85d844abe0587404d7b3e70299229" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "5dbfebebe6a85d844abe0587404d7b3e70299229~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#atanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh", "testImplicitTrig" ]
          }
        }
      }
    },
    "49ed2b81e8a086fd0a801ba2fa54a4f16827512f" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "49ed2b81e8a086fd0a801ba2fa54a4f16827512f~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#atan" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        }
      }
    },
    "2af72846f1b96315804a320f6fd95bcd5458a547" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "2af72846f1b96315804a320f6fd95bcd5458a547~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testImplicitTrig", "testSqrt1", "testSqrt2" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar" ]
          }
        }
      }
    },
    "f50fbcf42c2693055127bda1060a636697427bbb" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "f50fbcf42c2693055127bda1060a636697427bbb~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "5de033d1b793e6260767609e735105013be6c0d7" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "5de033d1b793e6260767609e735105013be6c0d7~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#acosh" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#asinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh", "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#atanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh", "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt1z" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrt1z", "testSqrt1zNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#tan" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#tanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig", "testTanh" ]
          }
        }
      }
    },
    "a4bee7004200d68afe8c6831b3eced555d98d8da" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "a4bee7004200d68afe8c6831b3eced555d98d8da~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#add(Complex)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAdd", "testAddInf", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#divide(Complex)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getArgument" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#subtract(Complex)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAtanh", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSubtract", "testSubtractInf" ]
          }
        }
      }
    },
    "bcbfee1dc3026cf65e5c430bd01b0995e5e9da99" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "bcbfee1dc3026cf65e5c430bd01b0995e5e9da99~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#acos" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#asin" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#atan" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#atanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh", "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#pow(Complex)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#pow(double)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt1z" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrt1z", "testSqrt1zNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#square" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh", "testImplicitTrig" ]
          }
        }
      }
    },
    "ac1975ce8826cc668823de2cd36d1fa612b301a7" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "ac1975ce8826cc668823de2cd36d1fa612b301a7~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt1z" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrt1z", "testSqrt1zNaN" ]
          }
        }
      }
    },
    "b077fd577c26357c9abde43f261c9029c8891ae9" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "b077fd577c26357c9abde43f261c9029c8891ae9~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "621aa33504611b6579adee71836e1fe43636d2cd" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "621aa33504611b6579adee71836e1fe43636d2cd~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testImplicitTrig", "testSqrt1", "testSqrt2" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar" ]
          }
        }
      }
    },
    "ea2c1d79d8b482bed262541e813d037294e6b572" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "ea2c1d79d8b482bed262541e813d037294e6b572~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest#testComputeRoots" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots" ]
          }
        }
      }
    },
    "6ae5bc3a4bbd4e5075840cf4ee735424644e7d8d" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "4336ff7399136cb41516dfe3e5ddacba7cbac6aa" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "c4e612eda82314741bd69af912a29eb9bc9949dd" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "ea2c1d79d8b482bed262541e813d037294e6b572",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#gcd" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#gcdPositive" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#mulAndCheck" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.ArithmeticUtils#pow" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#<init>" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#getDenominator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#getNumerator" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction#pow" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testPow", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#assertFraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testPow" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest#testPow" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testPow" ]
          }
        }
      }
    },
    "2f1c0b5dc250b34c2e7d4a7844c76d67e5ce2b2e" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "2f1c0b5dc250b34c2e7d4a7844c76d67e5ce2b2e~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testAcos" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testAsinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAsinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testAtanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testCosh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testCosh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testExp" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testExp" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testLog" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testLog" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testSinh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSinh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testSqrt2" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testSqrt2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testTanh" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testTanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#divide(Complex)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#divide(double)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#pow(Complex)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#pow(double)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#sqrt" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testImplicitTrig", "testSqrt1", "testSqrt2" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testAbsNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbsNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testConjugateNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testConjugateNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testDivideNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testDivideZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testDivideZeroZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideZeroZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testGetArgumentNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testGetArgumentNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testHashCode" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testHashCode" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testNegateNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNegateNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testReciprocalNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testReciprocalNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarPowNaNBase" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPowNaNBase" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testSqrt1zNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrt1zNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testPolar2ComplexInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2ComplexInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testPolar2ComplexNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2ComplexNaN" ]
          }
        }
      }
    },
    "e2917811e634b1b7668d0e09d99ee82c7e1cf0a3" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "e2917811e634b1b7668d0e09d99ee82c7e1cf0a3~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest#testComputeRoots" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testPow", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testPow", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        }
      }
    },
    "1b5aefaa31ab52b4d0b96beabeced303d833e393" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "118a2fdd10b0989cd128539f6f2d01f845e07661" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "d7f354f0dcb945ecef5e0b664031631ba63c6cb5" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "58f8953f4ec36a1f9fb5d9eb69efcb08ff4f0e17",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        }
      }
    },
    "e06534c83e29d1ac47789860d2365ef3ff57e922" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "e06534c83e29d1ac47789860d2365ef3ff57e922~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "3c184d14a9433ba18d7aa15b7b6a64921f165293" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "5166d4beb42c1a71314312197d247ede015c2050" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "b867022591eb365476d0df3dce3e1d559369d011" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "5dd63435ba5d5f470f8d7e59c0f0bdf517d05756" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "2f23f3e17e0d1c0af516f0147de85d5c01cba45b" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "abec5ad87eeb1c4b176305348d601aff41db7572",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#complex2Interleaved(Complex[][][][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#extractComplexFromImaginaryArray(double[],int)" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#extractComplexFromImaginaryArray(float[],int)" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#extractComplexFromInterleavedArray(double[],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#extractComplexFromInterleavedArray(float[],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#extractComplexFromRealArray(double[],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#extractComplexFromRealArray(float[],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#imaginary2Complex(double[])" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testImaginaryToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#imaginary2Complex(float[])" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testImaginaryToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(double[])" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(double[][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(double[][][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(double[][][][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(float[])" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(float[][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#interleaved2Complex(float[][][],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#polar2Complex(double,double)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtPolar" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#polar2Complex(double[],double[])" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testSqrtPolar" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#real2Complex(double[])" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testRealToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#real2Complex(float[])" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testRealToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#split2Complex(double[],double[])" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#split2Complex(float[],float[])" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnity#<init>(int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2", "testPrecondition" ]
          }
        }
      }
    },
    "84821835de201e2fc90c5a362a9bd8fdfcb15079" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "84821835de201e2fc90c5a362a9bd8fdfcb15079~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#divide(Complex)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#divide(double)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#multiply(Complex)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testMultiply", "testMultiplyInfInf", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testSqrt1z", "testSqrt1zNaN" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testDivideNaNInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideNaNInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testDivideZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideZero" ]
          }
        }
      }
    },
    "8a1f45e1b7582c04b6296958cf191c59eedbc721" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "8a1f45e1b7582c04b6296958cf191c59eedbc721~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "f9076f094ac705cacd4ee6bd8465a2f42e255e0e" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "f9076f094ac705cacd4ee6bd8465a2f42e255e0e~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ]
          }
        }
      }
    },
    "ad5e98f8b6d11a23ac8aede34ef302d654021b7b" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "ad5e98f8b6d11a23ac8aede34ef302d654021b7b~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrt1z", "testSqrt1zNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "553e49dd33f630339f6b37ad5800c8f8e8d425ed" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "405f40f232faa1e248704f797e647f789958bfbb" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "ad5e98f8b6d11a23ac8aede34ef302d654021b7b",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ]
          }
        }
      }
    },
    "95729d67673dbfaa4a6452339c8a4fb38881623a" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "95729d67673dbfaa4a6452339c8a4fb38881623a~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "ef955b5f1e533fa7ea42b710039af63c735a928d" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "ef955b5f1e533fa7ea42b710039af63c735a928d~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "f872b872a8308fc5569d061a9755755c5654fc96" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "f872b872a8308fc5569d061a9755755c5654fc96~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "39f364a14e5a10727d182b1f15b0d52e0257075c" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "39f364a14e5a10727d182b1f15b0d52e0257075c~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "b769356edd2a31bef5475ec9df76c260a2c9155c" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "b769356edd2a31bef5475ec9df76c260a2c9155c~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#divide(Complex)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero" ]
          }
        }
      }
    },
    "4924902d753c639940acc7ca72da38f23cf4e122" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "b2c947bb831898e6c0340f2e7e98361e7558ac8a" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "3d97283d7acf5f3049761fcb38ac766aa378bd80",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest#testImplicitTrig" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testImplicitTrig" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarAdd" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarAdd" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarAddInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarAddInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarAddNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarAddNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarDivide" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarDivide" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarDivideNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarDivideNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarMultiply" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarMultiply" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarMultiplyInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarMultiplyInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarMultiplyNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarMultiplyNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarPow" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPow" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarPowNaNBase" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPowNaNBase" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarPowNaNExponent" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarPowNaNExponent" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarSubtract" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarSubtract" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarSubtractInf" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarSubtractInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testScalarSubtractNaN" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testScalarSubtractNaN" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#extractComplexFromRealArray(double[],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#extractComplexFromRealArray(float[],int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#real2Complex(double[])" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testRealToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtils#real2Complex(float[])" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testRealToComplex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#setArrays" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest#testExtractionMethods" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        }
      }
    },
    "588a8ddb52ed158fe26eefbeb81b2c7f76197c24" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "588a8ddb52ed158fe26eefbeb81b2c7f76197c24~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty", "testNthRoot_cornercase_thirdRoot_realPartZero", "testNthRoot_normal_fourthRoot", "testNthRoot_normal_thirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots", "testGetNumberOfRoots1", "testGetNumberOfRoots2", "testGetRootPrecondition1", "testGetRootPrecondition2" ]
          }
        }
      }
    },
    "a57399c7ae6e2e1c6919e34014f602a1eeccfd87" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "a57399c7ae6e2e1c6919e34014f602a1eeccfd87~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootCornercaseThirdRootImaginaryPartEmpty", "testNthRootCornercaseThirdRootRealPartZero", "testNthRootNormalFourthRoot", "testNthRootNormalThirdRoot" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootCornercaseThirdRootImaginaryPartEmpty", "testNthRootCornercaseThirdRootRealPartZero", "testNthRootNormalFourthRoot", "testNthRootNormalThirdRoot" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getArgument" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootCornercaseThirdRootImaginaryPartEmpty", "testNthRootCornercaseThirdRootRealPartZero", "testNthRootNormalFourthRoot", "testNthRootNormalThirdRoot" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootCornercaseThirdRootImaginaryPartEmpty", "testNthRootCornercaseThirdRootRealPartZero", "testNthRootNormalFourthRoot", "testNthRootNormalThirdRoot" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootCornercaseThirdRootImaginaryPartEmpty", "testNthRootCornercaseThirdRootRealPartZero", "testNthRootNormalFourthRoot", "testNthRootNormalThirdRoot" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#nthRoot" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootCornercaseThirdRootImaginaryPartEmpty", "testNthRootCornercaseThirdRootRealPartZero", "testNthRootNormalFourthRoot", "testNthRootNormalThirdRoot" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#ofCartesian" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootCornercaseThirdRootImaginaryPartEmpty", "testNthRootCornercaseThirdRootRealPartZero", "testNthRootNormalFourthRoot", "testNthRootNormalThirdRoot" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRootCornercaseThirdRootImaginaryPartEmpty", "testNthRootCornercaseThirdRootRealPartZero", "testNthRootNormalFourthRoot", "testNthRootNormalThirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testNthRootCornercaseThirdRootImaginaryPartEmpty" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootCornercaseThirdRootImaginaryPartEmpty" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testNthRootCornercaseThirdRootRealPartZero" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootCornercaseThirdRootRealPartZero" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testNthRootNormalFourthRoot" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootNormalFourthRoot" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testNthRootNormalThirdRoot" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootNormalThirdRoot" ]
          }
        }
      }
    },
    "fa5da2ab49420b3475d615b4ea14ae3dd04af854" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "fa5da2ab49420b3475d615b4ea14ae3dd04af854~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootNegativeArg" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#abs" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootNegativeArg" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getArgument" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootNegativeArg" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootNegativeArg" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootNegativeArg" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#nthRoot" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootNegativeArg" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#nthRoot(int)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootCornercaseThirdRootImaginaryPartEmpty", "testNthRootCornercaseThirdRootRealPartZero", "testNthRootNormalFourthRoot", "testNthRootNormalThirdRoot" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : [ "testComputeRoots" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#ofCartesian" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootNegativeArg" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootNegativeArg" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testNthRootNegativeArg" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testNthRootNegativeArg" ]
          }
        }
      }
    },
    "c2fadea8bb865290b782d8a845588741c82806df" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "c2fadea8bb865290b782d8a845588741c82806df~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnity" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.RootsOfUnityTest" : {
          "testcases" : { }
        }
      }
    },
    "d22b6d86356096afe8d5681c1035a68791470342" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "d22b6d86356096afe8d5681c1035a68791470342~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRootCornercaseThirdRootImaginaryPartEmpty", "testNthRootCornercaseThirdRootRealPartZero", "testNthRootNegativeArg", "testNthRootNormalFourthRoot", "testNthRootNormalThirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        }
      }
    },
    "03384e60dab8c6ac9a44c5bd9e9397b342b140fb" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "03384e60dab8c6ac9a44c5bd9e9397b342b140fb~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRootCornercaseThirdRootImaginaryPartEmpty", "testNthRootCornercaseThirdRootRealPartZero", "testNthRootNegativeArg", "testNthRootNormalFourthRoot", "testNthRootNormalThirdRoot", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParse", "testParseSpaceAllowedAroundNumbers" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#checkNotNegative" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParse" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#equals" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParse", "testParseSpaceAllowedAroundNumbers" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#ofCartesian" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParse", "testParseSpaceAllowedAroundNumbers" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#ofCis" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParse" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#ofPolar" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParse" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#ofReal" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParse" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#parse" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParse", "testParseInvalidIm", "testParseInvalidRe", "testParseMissingSeparator", "testParseSpaceAllowedAroundNumbers", "testParseWrongEnd", "testParseWrongStart" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#toString" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParse" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex$ComplexParsingException#<init>" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParseMissingSeparator", "testParseWrongEnd", "testParseWrongStart" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRootCornercaseThirdRootImaginaryPartEmpty", "testNthRootCornercaseThirdRootRealPartZero", "testNthRootNegativeArg", "testNthRootNormalFourthRoot", "testNthRootNormalThirdRoot", "testParse", "testParseInvalidIm", "testParseInvalidRe", "testParseMissingSeparator", "testParseSpaceAllowedAroundNumbers", "testParseWrongEnd", "testParseWrongStart", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testParse" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParse" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testParseInvalidIm" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParseInvalidIm" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testParseInvalidRe" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParseInvalidRe" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testParseMissingSeparator" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParseMissingSeparator" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testParseSpaceAllowedAroundNumbers" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParseSpaceAllowedAroundNumbers" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testParseWrongEnd" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParseWrongEnd" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest#testParseWrongStart" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParseWrongStart" ]
          }
        }
      }
    },
    "fcccb0ecfa5a855de8909c6644f19262845e8587" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "fcccb0ecfa5a855de8909c6644f19262845e8587~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#divide(Complex)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAtanh", "testImplicitTrig" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero" ]
          }
        }
      }
    },
    "65b5d844c4f1258dfac41fb595906854ca83a9be" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "65b5d844c4f1258dfac41fb595906854ca83a9be~1",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex$ComplexParsingException" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testParseMissingSeparator", "testParseWrongEnd", "testParseWrongStart" ]
          }
        }
      }
    },
    "40418955926ced67c155cf03009a0f4b54c8440b" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "40418955926ced67c155cf03009a0f4b54c8440b~1",
      "changedClazzes" : {
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils" : {
          "testcases" : { }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#complex2Imaginary" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToImaginary" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#complex2ImaginaryFloat" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToImaginary" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#complex2Interleaved" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#complex2InterleavedFloat" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#complex2Real" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToReal" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#complex2RealFloat" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToReal" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#extractComplexFromInterleavedArray" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#extractComplexFromRealArray" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#extractInterleavedFromComplexArray" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#extractRealFloatFromComplexArray" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#extractRealFromComplexArray" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#imaginary2Complex" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testImaginaryToComplex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#initialize" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInitialize" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#interleaved2Complex" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#polar2Complex" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#real2Complex" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testCExtract", "testRealToComplex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#split2Complex" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils$NegativeModulusException#<init>" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#altPolar" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#setArrays" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testCExtract" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testCExtract" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testComplexToImaginary" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToImaginary" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testComplexToInterleaved" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToInterleaved" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testComplexToReal" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToReal" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testExtractionMethods" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testExtractionMethods" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testImaginaryToComplex" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testImaginaryToComplex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testInitialize" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInitialize" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testInterleavedToComplex" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInterleavedToComplex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testPolar2Complex" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testPolar2ComplexIllegalModulus" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testPolar2ComplexInf" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2ComplexInf" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testPolar2ComplexNaN" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2ComplexNaN" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testRealToComplex" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testRealToComplex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testSplit2Complex" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.TestUtils" : {
          "testcases" : { }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.TestUtils#assertEquals" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.TestUtils#assertSame" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testExtractionMethods", "testPolar2ComplexInf", "testPolar2ComplexNaN" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.TestUtils#equalsIncludingNaN" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.package-info" : {
          "testcases" : { }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#exp" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testCExtract", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#multiply" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#negate" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#ofCartesian" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#ofReal" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRootCornercaseThirdRootImaginaryPartEmpty", "testNthRootCornercaseThirdRootRealPartZero", "testNthRootNegativeArg", "testNthRootNormalFourthRoot", "testNthRootNormalThirdRoot", "testParse", "testParseInvalidIm", "testParseInvalidRe", "testParseMissingSeparator", "testParseSpaceAllowedAroundNumbers", "testParseWrongEnd", "testParseWrongStart", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#equals" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInterleavedToComplex", "testRealToComplex", "testSplit2Complex" ]
          }
        }
      }
    },
    "0dc4b0b6239329263a0c51e7662adcb1e00fb1db" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "27115fd062937cfa166e5d58fb0a21198ef38f0b" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "7c8dc8ff351c76dd88231387c6db069cb4b9d000" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "40418955926ced67c155cf03009a0f4b54c8440b",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.Addition" : {
          "testcases" : { }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.Multiplication" : {
          "testcases" : { }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.NativeOperators" : {
          "testcases" : { }
        },
        "commons-numbers-field§org.apache.commons.numbers.field.AbstractField" : {
          "testcases" : { }
        },
        "commons-numbers-field§org.apache.commons.numbers.field.FP64" : {
          "testcases" : { }
        },
        "commons-numbers-field§org.apache.commons.numbers.field.FP64Field" : {
          "testcases" : { }
        },
        "commons-numbers-field§org.apache.commons.numbers.field.Field" : {
          "testcases" : { }
        },
        "commons-numbers-field§org.apache.commons.numbers.field.FieldParametricTest" : {
          "testcases" : { }
        },
        "commons-numbers-field§org.apache.commons.numbers.field.FieldTestData" : {
          "testcases" : { }
        },
        "commons-numbers-field§org.apache.commons.numbers.field.FieldsList" : {
          "testcases" : { }
        },
        "commons-numbers-field§org.apache.commons.numbers.field.FractionField" : {
          "testcases" : { }
        },
        "commons-numbers-field§org.apache.commons.numbers.field.package-info" : {
          "testcases" : { }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.Fraction" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseInteger", "testParseNegative", "testParseOne1", "testParseOne2", "testParseProper", "testParseProperNegative", "testParseZero1", "testParseZero2" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.FractionTest" : [ "testAbs", "testAdd", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testIntegerOverflow", "testLongValue", "testMath1261", "testMath835", "testMultiply", "testNegate", "testPercentage", "testPow", "testReciprocal", "testSerial", "testSubtract", "testToString" ]
          }
        }
      }
    },
    "9c6f77801265abe079b4054c3c90d55e956ee7cd" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "9c6f77801265abe079b4054c3c90d55e956ee7cd~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#equals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testMultiply", "testParseFromToString", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testIsPureQuaternion", "testIsUnitQuaternion", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testWrongDimension" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testHashCode", "testInverse", "testMultiply", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#divide" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#equals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testHashCode", "testMultiply", "testParseFromToString", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getQ0" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse", "testParseSpecials" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getQ1" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse", "testParseSpecials" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getQ2" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse", "testParseSpecials" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getQ3" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse", "testParseSpecials" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#hashCode" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testHashCode" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#inverse" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#multiply" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse", "testMultiply" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#norm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#norm2" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#normalize" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#of" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testHashCode", "testInverse", "testMultiply", "testParseFromToString", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#parse" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#positivePolarForm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#toString" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testMultiply", "testParseFromToString", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion$QuaternionParsingException" : {
          "testcases" : { }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion$QuaternionParsingException#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testIsPureQuaternion", "testIsUnitQuaternion", "testMultiply", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testWrongDimension" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#assertEquals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testMultiply", "testParseFromToString", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testHashCode" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testHashCode" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testInverse" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testMultiply" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testMultiply" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testParseFromToString" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testParseFromToString" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testParseInvalidI" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testParseInvalidI" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testParseInvalidJ" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testParseInvalidJ" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testParseInvalidK" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testParseInvalidK" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testParseInvalidScalar" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testParseInvalidScalar" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testParseMissingEnd" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testParseMissingEnd" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testParseMissingPart" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testParseMissingPart" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testParseMissingStart" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testParseMissingStart" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testParseSpecials" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testParseSpecials" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testPositivePolarFormWhenScalarNegative" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarNegative" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testPositivePolarFormWhenScalarPositive" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarPositive" ]
          }
        }
      }
    },
    "e9e0164fbb9676034a6c3597d2e63d2505295346" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "e9e0164fbb9676034a6c3597d2e63d2505295346~1",
      "changedClazzes" : {
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testIsPureQuaternion", "testIsUnitQuaternion", "testMultiply", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testWrongDimension" ]
          }
        }
      }
    },
    "a058f4127604e745cf44661ad6f23a33557ea89d" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "daa6a0616ac85869a2e078eb276438380643398a" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "f4bafc24f3267340e00e39ee4983e349361bb4c0" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "2d454318eae9686192d4eb6b1fd4b330088b03be",
      "changedClazzes" : {
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2Complex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.CStandardTest" : [ "testAcos", "testAsinh", "testAtanh", "testCosh", "testExp", "testImplicitTrig", "testLog", "testSinh", "testSqrt1", "testSqrt2", "testTanh" ],
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testAbs", "testAbsNaN", "testAdd", "testAddInf", "testConjugate", "testConjugateInfiinite", "testConjugateNaN", "testConstructor", "testConstructorNaN", "testDivide", "testDivideImaginary", "testDivideNaN", "testDivideNaNInf", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testGetArgument", "testGetArgumentInf", "testGetArgumentNaN", "testHashCode", "testMultiply", "testMultiplyInfInf", "testNegate", "testNegateNaN", "testNthRootCornercaseThirdRootImaginaryPartEmpty", "testNthRootCornercaseThirdRootRealPartZero", "testNthRootNegativeArg", "testNthRootNormalFourthRoot", "testNthRootNormalThirdRoot", "testParse", "testParseInvalidIm", "testParseInvalidRe", "testParseMissingSeparator", "testParseSpaceAllowedAroundNumbers", "testParseWrongEnd", "testParseWrongStart", "testReciprocal", "testReciprocalImaginary", "testReciprocalNaN", "testReciprocalReal", "testReciprocalReciprocal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarDivideZero", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN", "testSqrtPolar", "testSubtract", "testSubtractInf" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testIsPureQuaternion", "testIsUnitQuaternion", "testMultiply", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testWrongDimension" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testIsPureQuaternion", "testIsUnitQuaternion", "testMultiply", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testWrongDimension" ]
          }
        }
      }
    },
    "cfa71fc12f6a48d1d37e7e389a025dc8cea971b6" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "cfa71fc12f6a48d1d37e7e389a025dc8cea971b6~1",
      "changedClazzes" : {
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testCExtract", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#complex2Interleaved" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplex2InterleavedIllegalIndex2Dmax", "testComplex2InterleavedIllegalIndex2Dmin", "testComplex2InterleavedIllegalIndex3Dmax", "testComplex2InterleavedIllegalIndex3Dmin", "testComplex2InterleavedIllegalIndex4Dmax", "testComplex2InterleavedIllegalIndex4Dmin" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#complex2InterleavedFloat" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplex2InterleavedFloatIllegalIndex2Dmax", "testComplex2InterleavedFloatIllegalIndex2Dmin", "testComplex2InterleavedFloatIllegalIndex3Dmax", "testComplex2InterleavedFloatIllegalIndex3Dmin" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#initialize" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInitialize2d", "testInitialize3d" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#interleaved2Complex" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInterleaved2ComplexFloatIllegalIndex2Dmax", "testInterleaved2ComplexFloatIllegalIndex2Dmin", "testInterleaved2ComplexFloatIllegalIndex3Dmax", "testInterleaved2ComplexFloatIllegalIndex3Dmin", "testInterleaved2ComplexIllegalIndex2Dmax", "testInterleaved2ComplexIllegalIndex2Dmin", "testInterleaved2ComplexIllegalIndex3Dmax", "testInterleaved2ComplexIllegalIndex3Dmin", "testInterleaved2ComplexIllegalIndex4Dmax", "testInterleaved2ComplexIllegalIndex4Dmin" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils#polar2Complex" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus1D", "testPolar2ComplexIllegalModulus2D", "testPolar2ComplexIllegalModulus3D" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils$IndexOutOfRangeException" : {
          "testcases" : { }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils$IndexOutOfRangeException#<init>" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplex2InterleavedFloatIllegalIndex2Dmax", "testComplex2InterleavedFloatIllegalIndex2Dmin", "testComplex2InterleavedFloatIllegalIndex3Dmax", "testComplex2InterleavedFloatIllegalIndex3Dmin", "testComplex2InterleavedIllegalIndex2Dmax", "testComplex2InterleavedIllegalIndex2Dmin", "testComplex2InterleavedIllegalIndex3Dmax", "testComplex2InterleavedIllegalIndex3Dmin", "testComplex2InterleavedIllegalIndex4Dmax", "testComplex2InterleavedIllegalIndex4Dmin", "testInterleaved2ComplexFloatIllegalIndex2Dmax", "testInterleaved2ComplexFloatIllegalIndex2Dmin", "testInterleaved2ComplexFloatIllegalIndex3Dmax", "testInterleaved2ComplexFloatIllegalIndex3Dmin", "testInterleaved2ComplexIllegalIndex2Dmax", "testInterleaved2ComplexIllegalIndex2Dmin", "testInterleaved2ComplexIllegalIndex3Dmax", "testInterleaved2ComplexIllegalIndex3Dmin", "testInterleaved2ComplexIllegalIndex4Dmax", "testInterleaved2ComplexIllegalIndex4Dmin" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils$NegativeModulusException" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtils$NegativeModulusException#<init>" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus1D", "testPolar2ComplexIllegalModulus2D", "testPolar2ComplexIllegalModulus3D" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testCExtract", "testComplex2InterleavedFloatIllegalIndex2Dmax", "testComplex2InterleavedFloatIllegalIndex2Dmin", "testComplex2InterleavedFloatIllegalIndex3Dmax", "testComplex2InterleavedFloatIllegalIndex3Dmin", "testComplex2InterleavedIllegalIndex2Dmax", "testComplex2InterleavedIllegalIndex2Dmin", "testComplex2InterleavedIllegalIndex3Dmax", "testComplex2InterleavedIllegalIndex3Dmin", "testComplex2InterleavedIllegalIndex4Dmax", "testComplex2InterleavedIllegalIndex4Dmin", "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInitialize2d", "testInitialize3d", "testInterleaved2ComplexFloatIllegalIndex2Dmax", "testInterleaved2ComplexFloatIllegalIndex2Dmin", "testInterleaved2ComplexFloatIllegalIndex3Dmax", "testInterleaved2ComplexFloatIllegalIndex3Dmin", "testInterleaved2ComplexIllegalIndex2Dmax", "testInterleaved2ComplexIllegalIndex2Dmin", "testInterleaved2ComplexIllegalIndex3Dmax", "testInterleaved2ComplexIllegalIndex3Dmin", "testInterleaved2ComplexIllegalIndex4Dmax", "testInterleaved2ComplexIllegalIndex4Dmin", "testInterleavedToComplex", "testPolar2ComplexIllegalModulus", "testPolar2ComplexIllegalModulus1D", "testPolar2ComplexIllegalModulus2D", "testPolar2ComplexIllegalModulus3D", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testComplex2InterleavedFloatIllegalIndex2Dmax" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplex2InterleavedFloatIllegalIndex2Dmax" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testComplex2InterleavedFloatIllegalIndex2Dmin" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplex2InterleavedFloatIllegalIndex2Dmin" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testComplex2InterleavedFloatIllegalIndex3Dmax" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplex2InterleavedFloatIllegalIndex3Dmax" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testComplex2InterleavedFloatIllegalIndex3Dmin" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplex2InterleavedFloatIllegalIndex3Dmin" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testComplex2InterleavedIllegalIndex2Dmax" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplex2InterleavedIllegalIndex2Dmax" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testComplex2InterleavedIllegalIndex2Dmin" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplex2InterleavedIllegalIndex2Dmin" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testComplex2InterleavedIllegalIndex3Dmax" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplex2InterleavedIllegalIndex3Dmax" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testComplex2InterleavedIllegalIndex3Dmin" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplex2InterleavedIllegalIndex3Dmin" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testComplex2InterleavedIllegalIndex4Dmax" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplex2InterleavedIllegalIndex4Dmax" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testComplex2InterleavedIllegalIndex4Dmin" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplex2InterleavedIllegalIndex4Dmin" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testInitialize2d" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInitialize2d" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testInitialize3d" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInitialize3d" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testInterleaved2ComplexFloatIllegalIndex2Dmax" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInterleaved2ComplexFloatIllegalIndex2Dmax" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testInterleaved2ComplexFloatIllegalIndex2Dmin" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInterleaved2ComplexFloatIllegalIndex2Dmin" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testInterleaved2ComplexFloatIllegalIndex3Dmax" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInterleaved2ComplexFloatIllegalIndex3Dmax" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testInterleaved2ComplexFloatIllegalIndex3Dmin" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInterleaved2ComplexFloatIllegalIndex3Dmin" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testInterleaved2ComplexIllegalIndex2Dmax" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInterleaved2ComplexIllegalIndex2Dmax" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testInterleaved2ComplexIllegalIndex2Dmin" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInterleaved2ComplexIllegalIndex2Dmin" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testInterleaved2ComplexIllegalIndex3Dmax" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInterleaved2ComplexIllegalIndex3Dmax" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testInterleaved2ComplexIllegalIndex3Dmin" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInterleaved2ComplexIllegalIndex3Dmin" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testInterleaved2ComplexIllegalIndex4Dmax" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInterleaved2ComplexIllegalIndex4Dmax" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testInterleaved2ComplexIllegalIndex4Dmin" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInterleaved2ComplexIllegalIndex4Dmin" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testPolar2ComplexIllegalModulus1D" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus1D" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testPolar2ComplexIllegalModulus2D" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus2D" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#testPolar2ComplexIllegalModulus3D" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testPolar2ComplexIllegalModulus3D" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.TestUtils" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testComplexToImaginary", "testComplexToInterleaved", "testComplexToReal", "testExtractionMethods", "testImaginaryToComplex", "testInitialize", "testInterleavedToComplex", "testPolar2ComplexInf", "testPolar2ComplexNaN", "testRealToComplex", "testSplit2Complex" ]
          }
        },
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.TestUtils#assertEquals" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInitialize2d", "testInitialize3d" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#<init>" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInitialize2d", "testInitialize3d", "testPolar2ComplexIllegalModulus1D", "testPolar2ComplexIllegalModulus2D", "testPolar2ComplexIllegalModulus3D" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getImaginary" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInitialize2d", "testInitialize3d" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#getReal" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInitialize2d", "testInitialize3d" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#ofCartesian" : {
          "testcases" : {
            "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest" : [ "testInitialize2d", "testInitialize3d", "testPolar2ComplexIllegalModulus1D", "testPolar2ComplexIllegalModulus2D", "testPolar2ComplexIllegalModulus3D" ]
          }
        }
      }
    },
    "bd8d91cfe0cc15e0b695b00fcfc43d5d8b627aa4" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "bd8d91cfe0cc15e0b695b00fcfc43d5d8b627aa4~1",
      "changedClazzes" : {
        "commons-numbers-complex-streams§org.apache.commons.numbers.complex.streams.ComplexUtilsTest#setArrays" : {
          "testcases" : { }
        }
      }
    },
    "1d872c64a5a410f07cd81e638002092704ff5af6" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "1d872c64a5a410f07cd81e638002092704ff5af6~1",
      "changedClazzes" : {
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#<init>(double,double,double,double)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testIsPureQuaternion", "testIsUnitQuaternion", "testMultiply", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testWrongDimension" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#<init>(double,double[])" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testIsPureQuaternion", "testIsUnitQuaternion", "testMultiply", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testWrongDimension" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#add(Quaternion,Quaternion)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAddQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#conjugate" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testConjugate", "testNorm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#divide(double)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnitQuaternion", "testNormalize", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#dotProduct(Quaternion,Quaternion)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testDotProductQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#equals(Object)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testHashCode", "testMultiply", "testObjectEquals", "testParseFromToString", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#equals(Quaternion,double)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testHashCode", "testMultiply", "testObjectEquals", "testParseFromToString", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getQ0" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAddQuaternionQuaternion", "testConjugate", "testInverse", "testNormalize", "testParseSpecials", "testQuaternionEquals", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getQ1" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAddQuaternionQuaternion", "testConjugate", "testInverse", "testNormalize", "testParseSpecials", "testQuaternionEquals", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getQ2" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAddQuaternionQuaternion", "testConjugate", "testInverse", "testNormalize", "testParseSpecials", "testQuaternionEquals", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getQ3" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAddQuaternionQuaternion", "testConjugate", "testInverse", "testNormalize", "testParseSpecials", "testQuaternionEquals", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getScalarPart" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors2", "testAccessors3", "testNorm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getVectorPart" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors2", "testAccessors3" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getW" : {
          "testcases" : { }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getX" : {
          "testcases" : { }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getY" : {
          "testcases" : { }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getZ" : {
          "testcases" : { }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#hashCode" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testHashCode" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#inverse" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#isPureQuaternion(double)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsPureQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#multiply(Quaternion,Quaternion)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse", "testMultiply", "testNorm", "testScalarMultiplyDouble" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#multiply(double)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse", "testMultiply", "testNorm", "testScalarMultiplyDouble" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#norm2" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse", "testIsUnitQuaternion", "testNorm", "testNormalize", "testNormalizeFail", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#parse(String)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#positivePolarForm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#subtract(Quaternion,Quaternion)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testSubtractQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#toString" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testMultiply", "testParseFromToString", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testToString" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testAccessors1" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testAddQuaternionQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAddQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testConjugate" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testConjugate" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testInverse" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testNormalize" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNormalize" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testParseSpecials" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testParseSpecials" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testQuaternionEquals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testQuaternionEquals" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testScalarMultiplyDouble" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testScalarMultiplyDouble" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testSubtractQuaternionQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testSubtractQuaternionQuaternion" ]
          }
        }
      }
    },
    "50cf08d973fcf5956467a4936d3c25598d6576ce" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "50cf08d973fcf5956467a4936d3c25598d6576ce~1",
      "changedClazzes" : {
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#inverse" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#norm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnitQuaternion", "testNorm", "testNormalize", "testNormalizeFail", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        }
      }
    },
    "d216fe76769afcd8d271ba39038251bb5b9a4659" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "d216fe76769afcd8d271ba39038251bb5b9a4659~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#equals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testIsPureQuaternion", "testIsUnitQuaternion", "testMultiply", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testWrongDimension" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testUnitQuaternions", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#divide" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#equals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getW" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testUnitQuaternions", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getX" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testUnitQuaternions", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getY" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testUnitQuaternions", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getZ" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testUnitQuaternions", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#multiply" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#norm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#normSq" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#normalize" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#of" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testUnitQuaternions", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#positivePolarForm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInversePositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#toString" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion$Default#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testUnitQuaternions", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion$Normalized#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testUnitQuaternions", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion$Normalized#inverse" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion$Normalized#norm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testUnitQuaternions" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion$Normalized#normalize" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testUnitQuaternions" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion$PositivePolarForm#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testUnitQuaternions", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion$PositivePolarForm#inverse" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInversePositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testInverseNormalized", "testInversePositivePolarForm", "testIsPureQuaternion", "testIsUnitQuaternion", "testMultiply", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testUnitQuaternions", "testWrongDimension", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testInverseNormalized" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testInversePositivePolarForm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInversePositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testUnitQuaternions" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testUnitQuaternions" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testZeroQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testZeroQuaternion" ]
          }
        }
      }
    },
    "11f5f1add25d6113e0888b2d1ea225d2d18d9588" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "11f5f1add25d6113e0888b2d1ea225d2d18d9588~1",
      "changedClazzes" : {
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#equals(Object)" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testEquals1", "testEquals2", "testEquals3" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#hashCode" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testHashCode" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#equals(double,double)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideImaginary", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testHashCode", "testParse", "testParseSpaceAllowedAroundNumbers", "testReciprocalImaginary", "testReciprocalReal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN" ]
          }
        }
      }
    },
    "9186804d0fcc4b21d1ba4b974aa4275232df1bec" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "9186804d0fcc4b21d1ba4b974aa4275232df1bec~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#equals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#equals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getW" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getX" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getY" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getZ" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#negate" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#of" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#positivePolarForm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInversePositivePolarForm", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion$Default#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion$Normalized#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion$PositivePolarForm#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegate" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testInverseNormalized", "testInversePositivePolarForm", "testIsPureQuaternion", "testIsUnitQuaternion", "testMultiply", "testNegate", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testUnitQuaternions", "testWrongDimension", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testNegate" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegate" ]
          }
        }
      }
    },
    "c0bf9f7d93c9f5fd09bd123a089614727ee1ad6e" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "c0bf9f7d93c9f5fd09bd123a089614727ee1ad6e~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#equals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnit" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testInverseNormalized", "testInversePositivePolarForm", "testMultiply", "testNegate", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testUnitQuaternions", "testWrongDimension", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsPure", "testIsUnit" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$200" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnit" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$300" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnit" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$400" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnit" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$500" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnit" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#divide" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnit" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#isPure" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsPure" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#isUnit" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnit" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#norm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnit" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#normalize" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnit" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#of" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsPure", "testIsUnit" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsPure", "testIsUnit" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testInverseNormalized" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testInversePositivePolarForm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInversePositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testIsPure" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsPure" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testIsPureQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testIsUnit" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testIsUnit" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testIsUnitQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testUnitQuaternions" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testUnitQuaternions" ]
          }
        }
      }
    },
    "bf1d61e51a1dc77cdf3b3e5ec855f70055a66ea6" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "bf1d61e51a1dc77cdf3b3e5ec855f70055a66ea6~1",
      "changedClazzes" : {
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#normalize" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testIsUnit", "testNormalize", "testNormalizeFail", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testUnitQuaternions" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#positivePolarForm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInversePositivePolarForm", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive" ]
          }
        }
      }
    },
    "59af118b192a2d97939baacb56236684f5a0b7c7" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "59af118b192a2d97939baacb56236684f5a0b7c7~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.Precision#equals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegateNormalized", "testNegatePositivePolarForm", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegateNormalized", "testNegatePositivePolarForm", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$200" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegateNormalized", "testNegatePositivePolarForm", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$300" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegateNormalized", "testNegatePositivePolarForm", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$400" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegateNormalized", "testNegatePositivePolarForm", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$500" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegateNormalized", "testNegatePositivePolarForm", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#divide" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegateNormalized", "testNegatePositivePolarForm", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#equals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegateNormalized", "testNegatePositivePolarForm", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#negate" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegateNormalized", "testNegatePositivePolarForm", "testPositivePolarFormWhenScalarNegativeAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#norm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegateNormalized", "testNegatePositivePolarForm", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#normalize" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegateNormalized", "testNegatePositivePolarForm", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#of" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegateNormalized", "testNegatePositivePolarForm", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#positivePolarForm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegatePositivePolarForm", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#toString" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testInverseNormalized", "testInversePositivePolarForm", "testIsPure", "testIsUnit", "testMultiply", "testNegate", "testNegateNormalized", "testNegatePositivePolarForm", "testNorm", "testNormalize", "testNormalizeFail", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositive", "testPositivePolarFormWhenScalarPositiveAndNormalized", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testUnitQuaternions", "testWrongDimension", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#assertEquals" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testNegateNormalized" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegateNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testNegatePositivePolarForm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNegatePositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testPositivePolarFormWhenScalarNegativeAndNormalized" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarNegativeAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testPositivePolarFormWhenScalarPositiveAndNormalized" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        }
      }
    },
    "9076074737bfc5bcbc64d675a084bea981261715" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "9076074737bfc5bcbc64d675a084bea981261715~1",
      "changedClazzes" : {
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse_nanNorm", "testInverse_negativeInfinityNorm", "testInverse_positiveInfinityNorm", "testInverse_zeroNorm", "testNormalizeFail_nan", "testNormalizeFail_negativeInfinity", "testNormalizeFail_positiveInfinity", "testNormalizeFail_zero" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$200" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse_nanNorm", "testInverse_negativeInfinityNorm", "testInverse_positiveInfinityNorm", "testInverse_zeroNorm", "testNormalizeFail_nan", "testNormalizeFail_negativeInfinity", "testNormalizeFail_positiveInfinity", "testNormalizeFail_zero" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$300" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse_nanNorm", "testInverse_negativeInfinityNorm", "testInverse_positiveInfinityNorm", "testInverse_zeroNorm", "testNormalizeFail_nan", "testNormalizeFail_negativeInfinity", "testNormalizeFail_positiveInfinity", "testNormalizeFail_zero" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$400" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse_nanNorm", "testInverse_negativeInfinityNorm", "testInverse_positiveInfinityNorm", "testInverse_zeroNorm", "testNormalizeFail_nan", "testNormalizeFail_negativeInfinity", "testNormalizeFail_positiveInfinity", "testNormalizeFail_zero" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$500" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse_nanNorm", "testInverse_negativeInfinityNorm", "testInverse_positiveInfinityNorm", "testInverse_zeroNorm", "testNormalizeFail_nan", "testNormalizeFail_negativeInfinity", "testNormalizeFail_positiveInfinity", "testNormalizeFail_zero" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#inverse" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse", "testInverseNormalized", "testInversePositivePolarForm", "testInverse_nanNorm", "testInverse_negativeInfinityNorm", "testInverse_positiveInfinityNorm", "testInverse_zeroNorm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#norm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNormalizeFail_nan", "testNormalizeFail_negativeInfinity", "testNormalizeFail_positiveInfinity", "testNormalizeFail_zero" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#normSq" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse_nanNorm", "testInverse_negativeInfinityNorm", "testInverse_positiveInfinityNorm", "testInverse_zeroNorm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#normalize" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testIsUnit", "testNegateNormalized", "testNegatePositivePolarForm", "testNormalize", "testNormalizeFail_nan", "testNormalizeFail_negativeInfinity", "testNormalizeFail_positiveInfinity", "testNormalizeFail_zero", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositive", "testPositivePolarFormWhenScalarPositiveAndNormalized", "testUnitQuaternions" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#of" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse_nanNorm", "testInverse_negativeInfinityNorm", "testInverse_positiveInfinityNorm", "testInverse_zeroNorm", "testNormalizeFail_nan", "testNormalizeFail_negativeInfinity", "testNormalizeFail_positiveInfinity", "testNormalizeFail_zero" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testInverseNormalized", "testInversePositivePolarForm", "testInverse_nanNorm", "testInverse_negativeInfinityNorm", "testInverse_positiveInfinityNorm", "testInverse_zeroNorm", "testIsPure", "testIsUnit", "testMultiply", "testNegate", "testNegateNormalized", "testNegatePositivePolarForm", "testNorm", "testNormalize", "testNormalizeFail_nan", "testNormalizeFail_negativeInfinity", "testNormalizeFail_positiveInfinity", "testNormalizeFail_zero", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositive", "testPositivePolarFormWhenScalarPositiveAndNormalized", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testUnitQuaternions", "testWrongDimension", "testZeroQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testInverse_nanNorm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse_nanNorm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testInverse_negativeInfinityNorm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse_negativeInfinityNorm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testInverse_positiveInfinityNorm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse_positiveInfinityNorm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testInverse_zeroNorm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse_zeroNorm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testNormalizeFail_nan" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNormalizeFail_nan" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testNormalizeFail_negativeInfinity" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNormalizeFail_negativeInfinity" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testNormalizeFail_positiveInfinity" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNormalizeFail_positiveInfinity" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testNormalizeFail_zero" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testNormalizeFail_zero" ]
          }
        }
      }
    },
    "3eedf4c2b0654f55d8cf02ca0a16124db4e9aef3" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "3eedf4c2b0654f55d8cf02ca0a16124db4e9aef3~1",
      "changedClazzes" : {
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#inverse" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverse", "testInverseNormalized", "testInversePositivePolarForm", "testInverse_nanNorm", "testInverse_negativeInfinityNorm", "testInverse_positiveInfinityNorm", "testInverse_zeroNorm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#normalize" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testIsUnit", "testNegateNormalized", "testNegatePositivePolarForm", "testNormalize", "testNormalizeFail_nan", "testNormalizeFail_negativeInfinity", "testNormalizeFail_positiveInfinity", "testNormalizeFail_zero", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositive", "testPositivePolarFormWhenScalarPositiveAndNormalized", "testUnitQuaternions" ]
          }
        }
      }
    },
    "a9cd5d9c510a4323bb05f822be440526e3b5d068" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "a9cd5d9c510a4323bb05f822be440526e3b5d068~1",
      "changedClazzes" : {
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testPositivePolarFormWhenScalarNegative" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarNegative" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testPositivePolarFormWhenScalarNegativeAndNormalized" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarNegativeAndNormalized" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testPositivePolarFormWhenScalarPositive" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarPositive" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testPositivePolarFormWhenScalarPositiveAndNormalized" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testPositivePolarFormWhenScalarPositiveAndNormalized" ]
          }
        }
      }
    },
    "fd2fb49e14832ee28f361d558305a8886b15ad76" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "fd2fb49e14832ee28f361d558305a8886b15ad76~1",
      "changedClazzes" : {
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp" : {
          "testcases" : { }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : {
          "testcases" : { }
        }
      }
    },
    "6d2675bc4e8908c52a5447d63f7e3719c2cfebae" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "6d2675bc4e8908c52a5447d63f7e3719c2cfebae~1",
      "changedClazzes" : {
        "commons-numbers-core§org.apache.commons.numbers.core.Precision" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testFloatingPointEqualsWithRelativeTolerance", "testFloatingPointEqualsWithRelativeToleranceNaN", "testReciprocalReal" ],
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testCompareToEpsilon", "testCompareToMaxUlps", "testEqualsIncludingNaN", "testEqualsIncludingNaNWithAllowedDelta", "testEqualsIncludingNaNWithAllowedUlps", "testEqualsWithAllowedDelta", "testEqualsWithAllowedUlps", "testEqualsWithRelativeTolerance", "testFloatEqualsWithAllowedUlps", "testMath1127", "testMath475", "testRepresentableDelta", "testRoundDouble" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.ContinuedFractionTest" : [ "testGoldenRatio", "testOneIteration", "testTwoIterations" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedBetaTest" : [ "testMath1067", "testRegularizedBetaPositivePositivePositive", "testRegularizedBetaTinyArgument", "testRegularizedBetaZeroPositivePositive" ],
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testInverseNormalized", "testInversePositivePolarForm", "testIsUnit", "testMultiply", "testNegate", "testNegateNormalized", "testNegatePositivePolarForm", "testParseFromToString", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarPositive", "testQuaternionEquals", "testQuaternionEquals2" ]
          }
        },
        "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest#testRoundDouble" : {
          "testcases" : {
            "commons-numbers-core§org.apache.commons.numbers.core.PrecisionTest" : [ "testRoundDouble" ]
          }
        }
      }
    },
    "d0cff0d8f2a249e6c87df323fe635386749f62f4" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "d0cff0d8f2a249e6c87df323fe635386749f62f4~1",
      "changedClazzes" : {
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testHashCode" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testHashCode" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFraction" : {
          "testcases" : {
            "commons-numbers-arrays§org.apache.commons.numbers.arrays.LinearCombinationTest" : [ "testTwoSums" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testDoubleFormat", "testFormat", "testFormatImproper", "testFormatImproperNegative", "testFormatNegative", "testFormatZero", "testLongFormat", "testParse", "testParseBig", "testParseInteger", "testParseNegative", "testParseProper", "testParseProperNegative" ],
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testAbs", "testAdd", "testBigDecimalValue", "testCompareTo", "testConstructor", "testConstructorDouble", "testDigitLimitConstructor", "testDivide", "testDoubleConstructor", "testDoubleValue", "testDoubleValueForLargeNumeratorAndDenominator", "testDoubleValueForLargeNumeratorAndSmallDenominator", "testEpsilonLimitConstructor", "testEqualsAndHashCode", "testFloatValue", "testFloatValueForLargeNumeratorAndDenominator", "testFloatValueForLargeNumeratorAndSmallDenominator", "testGetReducedFraction", "testGoldenRatio", "testIntValue", "testLongValue", "testMath340", "testMultiply", "testNegate", "testNegativeValueOverflow", "testPercentage", "testPositiveValueOverflow", "testPow", "testReciprocal", "testSerial", "testSubtract" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest#testParseBig" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionFormatTest" : [ "testParseBig" ]
          }
        },
        "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest#testBigDecimalValue" : {
          "testcases" : {
            "commons-numbers-fraction§org.apache.commons.numbers.fraction.BigFractionTest" : [ "testBigDecimalValue" ]
          }
        }
      }
    },
    "e08f7b5e5d89d2020a9740ec53f5e743db7a6877" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "e08f7b5e5d89d2020a9740ec53f5e743db7a6877~1",
      "changedClazzes" : {
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testInverseNormalized", "testInversePositivePolarForm", "testInverse_nanNorm", "testInverse_negativeInfinityNorm", "testInverse_positiveInfinityNorm", "testInverse_zeroNorm", "testIsPure", "testIsUnit", "testMultiply", "testNegate", "testNegateNormalized", "testNegatePositivePolarForm", "testNorm", "testNormalize", "testNormalizeFail_nan", "testNormalizeFail_negativeInfinity", "testNormalizeFail_positiveInfinity", "testNormalizeFail_zero", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositive", "testPositivePolarFormWhenScalarPositiveAndNormalized", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testUnitQuaternions", "testWrongDimension", "testZeroQuaternion" ]
          }
        }
      }
    },
    "866561ea714cdc1c13158a0233127b5efa210741" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "866561ea714cdc1c13158a0233127b5efa210741~1",
      "changedClazzes" : {
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$200" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$300" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$400" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$500" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#conjugate" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#divide" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#dotProduct" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getW" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getX" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getY" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getZ" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#multiply" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_nonNormalizedInputs", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#negate" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#norm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#normalize" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#of" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#positivePolarForm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#toString" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_nonNormalizedInputs", "testSlerp_tOutsideOfZeroToOne" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp#access$000" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp#access$100" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp#apply" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp$Linear#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp$Linear#apply" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp$Spherical#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp$Spherical#apply" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#assertQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_nonNormalizedInputs", "testSlerp_tOutsideOfZeroToOne" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#createZRotation" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#testSlerp_identicalInputs" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#testSlerp_inputQuaternionsHaveMinusOneDotProduct" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_inputQuaternionsHaveMinusOneDotProduct" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#testSlerp_linearAlgorithm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_linearAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#testSlerp_nonNormalizedInputs" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_nonNormalizedInputs" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#testSlerp_tOutsideOfZeroToOne" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_tOutsideOfZeroToOne" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#testVectorTransform_simple" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testVectorTransform_simple" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#testVectorTransform_tOutsideOfZeroToOne_" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#transformVector" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        }
      }
    },
    "e072c34ab57e1095c5e828e78f6305bc5dc787fe" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "e072c34ab57e1095c5e828e78f6305bc5dc787fe~1",
      "changedClazzes" : {
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$200" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$300" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$400" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#access$500" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#divide" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#dotProduct" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getW" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getX" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getY" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#getZ" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#negate" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#norm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#normalize" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#of" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#positivePolarForm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#toString" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp#access$000" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp#access$100" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp#apply" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp#apply(double)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp$Spherical#<init>" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp$Spherical#apply" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#assertQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#createZRotation" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#testSlerp_sphericalAlgorithm" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_sphericalAlgorithm" ]
          }
        }
      }
    },
    "e29dff1e3adbab30d4041636de9d9e59649ec2b2" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "e29dff1e3adbab30d4041636de9d9e59649ec2b2~1",
      "changedClazzes" : {
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#equals(Object)" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testEquals1", "testEquals2", "testEquals3" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#hashCode" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testHashCode" ]
          }
        },
        "commons-numbers-complex§org.apache.commons.numbers.complex.Complex#equals(double,double)" : {
          "testcases" : {
            "commons-numbers-complex§org.apache.commons.numbers.complex.ComplexTest" : [ "testDivideImaginary", "testDivideReal", "testDivideZero", "testDivideZeroZero", "testEqualsClass", "testEqualsImaginaryDifference", "testEqualsNull", "testEqualsRealDifference", "testEqualsSame", "testEqualsTrue", "testFloatingPointEquals", "testFloatingPointEqualsNaN", "testFloatingPointEqualsPrecondition1", "testFloatingPointEqualsPrecondition2", "testFloatingPointEqualsWithAllowedDelta", "testFloatingPointEqualsWithAllowedDeltaNaN", "testHashCode", "testParse", "testParseSpaceAllowedAroundNumbers", "testReciprocalImaginary", "testReciprocalReal", "testScalarAdd", "testScalarAddInf", "testScalarAddNaN", "testScalarDivide", "testScalarDivideNaN", "testScalarMultiply", "testScalarMultiplyInf", "testScalarMultiplyNaN", "testScalarPow", "testScalarPowNaNBase", "testScalarPowNaNExponent", "testScalarSubtract", "testScalarSubtractInf", "testScalarSubtractNaN" ]
          }
        },
        "commons-numbers-field§org.apache.commons.numbers.field.FP64#hashCode" : {
          "testcases" : { }
        },
        "commons-numbers-field§org.apache.commons.numbers.field.FP64Field" : {
          "testcases" : { }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma$P#value(double,double,double,int)" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf0", "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive", "testRegularizedGammaNegativePositive", "testRegularizedGammaPositiveNan", "testRegularizedGammaPositiveNegative", "testRegularizedGammaPositivePositive", "testRegularizedGammaPositiveZero", "testRegularizedGammaZeroPositive" ]
          }
        },
        "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGamma$Q#value(double,double,double,int)" : {
          "testcases" : {
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfDifferenceTest" : [ "testTwoArgumentErf" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfTest" : [ "testErf0", "testErf1960", "testErf2576", "testErf2807", "testErf3291", "testErfGnu", "testLargeValues" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.ErfcTest" : [ "testErfcGnu", "testErfcMaple" ],
            "commons-numbers-gamma§org.apache.commons.numbers.gamma.RegularizedGammaTest" : [ "testRegularizedGammaNanPositive", "testRegularizedGammaNegativePositive", "testRegularizedGammaPositiveNan", "testRegularizedGammaPositiveNegative", "testRegularizedGammaPositivePositive", "testRegularizedGammaPositiveZero", "testRegularizedGammaZeroPositive" ]
          }
        }
      }
    },
    "b67f72e30d651304c4669122039770f88f814868" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "b67f72e30d651304c4669122039770f88f814868~1",
      "changedClazzes" : {
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#dot(Quaternion)" : {
          "testcases" : { }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#dotProduct(Quaternion)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testDotProductQuaternionQuaternion" ],
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest#testDotProductQuaternionQuaternion" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testDotProductQuaternionQuaternion" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Slerp#<init>(Quaternion,Quaternion)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest#testSlerp_inputQuaternionsHaveMinusOneDotProduct" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_inputQuaternionsHaveMinusOneDotProduct" ]
          }
        }
      }
    },
    "b18117ec0725d6087097e33fd3a8ef0f18347e28" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "b18117ec0725d6087097e33fd3a8ef0f18347e28~1",
      "changedClazzes" : {
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#<init>(Type,double,double,double,double)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testInverseNormalized", "testInversePositivePolarForm", "testInverse_nanNorm", "testInverse_negativeInfinityNorm", "testInverse_positiveInfinityNorm", "testInverse_zeroNorm", "testIsPure", "testIsUnit", "testMultiply", "testNegate", "testNegateNormalized", "testNegatePositivePolarForm", "testNorm", "testNormalize", "testNormalizeFail_nan", "testNormalizeFail_negativeInfinity", "testNormalizeFail_positiveInfinity", "testNormalizeFail_zero", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositive", "testPositivePolarFormWhenScalarPositiveAndNormalized", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testUnitQuaternions", "testWrongDimension", "testZeroQuaternion" ],
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        },
        "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.Quaternion#of(double,double,double,double)" : {
          "testcases" : {
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.QuaternionTest" : [ "testAccessors1", "testAccessors2", "testAccessors3", "testAddQuaternionQuaternion", "testConjugate", "testDotProductQuaternionQuaternion", "testHashCode", "testInverse", "testInverseNormalized", "testInversePositivePolarForm", "testInverse_nanNorm", "testInverse_negativeInfinityNorm", "testInverse_positiveInfinityNorm", "testInverse_zeroNorm", "testIsPure", "testIsUnit", "testMultiply", "testNegate", "testNegateNormalized", "testNegatePositivePolarForm", "testNorm", "testNormalize", "testNormalizeFail_nan", "testNormalizeFail_negativeInfinity", "testNormalizeFail_positiveInfinity", "testNormalizeFail_zero", "testObjectEquals", "testParseFromToString", "testParseInvalidI", "testParseInvalidJ", "testParseInvalidK", "testParseInvalidScalar", "testParseMissingEnd", "testParseMissingPart", "testParseMissingStart", "testParseSpecials", "testPositivePolarFormWhenScalarNegative", "testPositivePolarFormWhenScalarNegativeAndNormalized", "testPositivePolarFormWhenScalarPositive", "testPositivePolarFormWhenScalarPositiveAndNormalized", "testQuaternionEquals", "testQuaternionEquals2", "testScalarMultiplyDouble", "testSubtractQuaternionQuaternion", "testToString", "testUnitQuaternions", "testWrongDimension", "testZeroQuaternion" ],
            "commons-numbers-quaternion§org.apache.commons.numbers.quaternion.SlerpTest" : [ "testSlerp_identicalInputs", "testSlerp_inputQuaternionsHaveMinusOneDotProduct", "testSlerp_linearAlgorithm", "testSlerp_linearAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_nonNormalizedInputs", "testSlerp_sphericalAlgorithm", "testSlerp_sphericalAlgorithm_allOutputsAreInPositivePolarForm", "testSlerp_tOutsideOfZeroToOne", "testVectorTransform_simple", "testVectorTransform_tOutsideOfZeroToOne_" ]
          }
        }
      }
    },
    "3d8301fecc030e19436e4f7289b1e01192f660dc" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "3d8301fecc030e19436e4f7289b1e01192f660dc~1",
      "changedClazzes" : {
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#<init>" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi_lowerBound", "testNormalizeBetweenMinusPiAndPi_upperBound", "testNormalizeBetweenZeroAndTwoPi_lowerBound", "testNormalizeBetweenZeroAndTwoPi_upperBound" ],
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeUpperAndLowerBounds" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#normalize" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi_lowerBound", "testNormalizeBetweenMinusPiAndPi_upperBound", "testNormalizeBetweenZeroAndTwoPi_lowerBound", "testNormalizeBetweenZeroAndTwoPi_upperBound" ],
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeUpperAndLowerBounds" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#ofRadians" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi_lowerBound", "testNormalizeBetweenMinusPiAndPi_upperBound", "testNormalizeBetweenZeroAndTwoPi_lowerBound", "testNormalizeBetweenZeroAndTwoPi_upperBound" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#ofTurns" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeUpperAndLowerBounds" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#toRadians" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi_lowerBound", "testNormalizeBetweenMinusPiAndPi_upperBound", "testNormalizeBetweenZeroAndTwoPi_lowerBound", "testNormalizeBetweenZeroAndTwoPi_upperBound" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#toTurns" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeUpperAndLowerBounds" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadians#normalizeBetweenMinusPiAndPi" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi_lowerBound", "testNormalizeBetweenMinusPiAndPi_upperBound" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadians#normalizeBetweenZeroAndTwoPi" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenZeroAndTwoPi_lowerBound", "testNormalizeBetweenZeroAndTwoPi_upperBound" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi1", "testNormalizeBetweenMinusPiAndPi2", "testNormalizeBetweenMinusPiAndPi3", "testNormalizeBetweenMinusPiAndPi4", "testNormalizeBetweenMinusPiAndPi_lowerBound", "testNormalizeBetweenMinusPiAndPi_upperBound", "testNormalizeBetweenZeroAndTwoPi1", "testNormalizeBetweenZeroAndTwoPi2", "testNormalizeBetweenZeroAndTwoPi3", "testNormalizeBetweenZeroAndTwoPi4", "testNormalizeBetweenZeroAndTwoPi_lowerBound", "testNormalizeBetweenZeroAndTwoPi_upperBound" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest#testNormalizeBetweenMinusPiAndPi_lowerBound" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi_lowerBound" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest#testNormalizeBetweenMinusPiAndPi_upperBound" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi_upperBound" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest#testNormalizeBetweenZeroAndTwoPi_lowerBound" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenZeroAndTwoPi_lowerBound" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest#testNormalizeBetweenZeroAndTwoPi_upperBound" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenZeroAndTwoPi_upperBound" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionDegrees", "testConversionRadians", "testConversionTurns", "testEquals1", "testEquals2", "testEquals3", "testHashCode", "testNormalizeAroundZero1", "testNormalizeAroundZero2", "testNormalizeAroundZero3", "testNormalizeAroundZero4", "testNormalizeUpperAndLowerBounds", "testPi", "testZero" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testNormalizeUpperAndLowerBounds" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeUpperAndLowerBounds" ]
          }
        }
      }
    },
    "00b2b5621ed39141d81b92b3fa3ba96a4e54c1c1" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "00b2b5621ed39141d81b92b3fa3ba96a4e54c1c1~1",
      "changedClazzes" : {
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#<init>" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeVeryCloseToBounds" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#normalize" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeVeryCloseToBounds" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#normalize(PlaneAngle)" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi1", "testNormalizeBetweenMinusPiAndPi2", "testNormalizeBetweenMinusPiAndPi3", "testNormalizeBetweenMinusPiAndPi4", "testNormalizeBetweenMinusPiAndPi_lowerBound", "testNormalizeBetweenMinusPiAndPi_upperBound", "testNormalizeBetweenZeroAndTwoPi1", "testNormalizeBetweenZeroAndTwoPi2", "testNormalizeBetweenZeroAndTwoPi3", "testNormalizeBetweenZeroAndTwoPi4", "testNormalizeBetweenZeroAndTwoPi_lowerBound", "testNormalizeBetweenZeroAndTwoPi_upperBound" ],
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeAroundZero1", "testNormalizeAroundZero2", "testNormalizeAroundZero3", "testNormalizeAroundZero4", "testNormalizeUpperAndLowerBounds" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#ofTurns" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeVeryCloseToBounds" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#toTurns" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeVeryCloseToBounds" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testConversionDegrees", "testConversionRadians", "testConversionTurns", "testEquals1", "testEquals2", "testEquals3", "testHashCode", "testNormalizeAroundZero1", "testNormalizeAroundZero2", "testNormalizeAroundZero3", "testNormalizeAroundZero4", "testNormalizeUpperAndLowerBounds", "testNormalizeVeryCloseToBounds", "testPi", "testZero" ]
          }
        },
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest#testNormalizeVeryCloseToBounds" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeVeryCloseToBounds" ]
          }
        }
      }
    },
    "56cde56fdf5d5661cc8ccfd1d3928e9ca9b52b7d" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "56cde56fdf5d5661cc8ccfd1d3928e9ca9b52b7d~1",
      "changedClazzes" : {
        "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngle#normalize(PlaneAngle)" : {
          "testcases" : {
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleRadiansTest" : [ "testNormalizeBetweenMinusPiAndPi1", "testNormalizeBetweenMinusPiAndPi2", "testNormalizeBetweenMinusPiAndPi3", "testNormalizeBetweenMinusPiAndPi4", "testNormalizeBetweenMinusPiAndPi_lowerBound", "testNormalizeBetweenMinusPiAndPi_upperBound", "testNormalizeBetweenZeroAndTwoPi1", "testNormalizeBetweenZeroAndTwoPi2", "testNormalizeBetweenZeroAndTwoPi3", "testNormalizeBetweenZeroAndTwoPi4", "testNormalizeBetweenZeroAndTwoPi_lowerBound", "testNormalizeBetweenZeroAndTwoPi_upperBound" ],
            "commons-numbers-angle§org.apache.commons.numbers.angle.PlaneAngleTest" : [ "testNormalizeAroundZero1", "testNormalizeAroundZero2", "testNormalizeAroundZero3", "testNormalizeAroundZero4", "testNormalizeUpperAndLowerBounds", "testNormalizeVeryCloseToBounds" ]
          }
        }
      }
    },
    "4ab6e3e37805552cb41f71946439d2e1373c3357" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "7c2486362b64201fd8dc19b2df12aefba2a4165a" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "78bf4b87c816f04484adfeda7311a1b06752b230" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "d766bac7f0c17728f82ce4b30f3e5079de555d35" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    },
    "1a217c3e156a057ec3c308107f41c8f661c24cfb" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "1a217c3e156a057ec3c308107f41c8f661c24cfb~1",
      "changedClazzes" : {
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testIsPrime", "testNextPrime", "testPrimeFactors" ],
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "boundedTrialDivision_square", "boundedTrialDivision_twoDifferentFactors", "millerRabinPrimeTest_composites", "millerRabinPrimeTest_primes", "smallTrialDivision_BoundaryPrimes", "smallTrialDivision_largeComposite", "smallTrialDivision_noSmallPrimeFactors", "smallTrialDivision_oneFactor", "smallTrialDivision_repeatedFactors", "smallTrialDivision_smallComposite", "trialDivision_largeComposite", "trialDivision_oneSmallFactor", "trialDivision_repeatedFactors", "trialDivision_smallComposite", "trialDivision_veryLargeComposite" ]
          }
        }
      }
    },
    "44f275ad7e8c562a9d613a8d29cb8f5d3366e152" : {
      "running" : true,
      "jdk" : 8,
      "predecessor" : "44f275ad7e8c562a9d613a8d29cb8f5d3366e152~1",
      "changedClazzes" : {
        "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimes#millerRabinPrimeTest(int)" : {
          "testcases" : {
            "commons-numbers-primes§org.apache.commons.numbers.primes.PrimesTest" : [ "testIsPrime", "testNextPrime" ],
            "commons-numbers-primes§org.apache.commons.numbers.primes.SmallPrimesTest" : [ "millerRabinPrimeTest_composites", "millerRabinPrimeTest_primes" ]
          }
        }
      }
    },
    "092e816b4e0bf369ff08c7d8b4e640b15ebeb47d" : {
      "running" : false,
      "jdk" : 8,
      "changedClazzes" : { }
    }
  },
  "android" : false
}